2022-03-22 21:14:31:318 grammar LogManager.java:25 before: (PARSER_GRAMMAR Chems (OPTIONS (= tokenVocab ChemsLexer)) (@ header {
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"

}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT PRINTLN DIFERENTE PARIZQ expression PARDER ';' {$instr = instruction.NewImprimir($expression.p,false)}) (ALT PRINT DIFERENTE PARIZQ expression PARDER ';' {$instr = instruction.NewImprimir($expression.p,true)}) (ALT P_LET (= muteable mut) (= isArray array_st) (= id ID) DOSPUNTOS (= isTipo tipo) IGUAL expression ';' {$instr = instruction.NewDeclaration($id.text,$isTipo.p,$expression.p, $isArray.arr,$muteable.arr,$expression.start.GetLine(),$expression.start.GetColumn(),0,false)	}) (ALT P_LET (= muteable mut) (= isArray array_st) (= id ID) IGUAL expression ';' {$instr = instruction.NewDeclaration($id.text,interfaces.NULL,$expression.p, $isArray.arr,$muteable.arr,$expression.start.GetLine(),$expression.start.GetColumn(),0,false)	}) (ALT P_LET (= muteable mut) (= isArray array_st) (= id ID) IGUAL (= isvector vector_st) expression ';' {$instr = instruction.NewDeclaration($id.text,interfaces.NULL,$expression.p, $isArray.arr,$muteable.arr,$expression.start.GetLine(),$expression.start.GetColumn(),0,$isvector.arr)	}) (ALT P_LET (= muteable mut) (= id ID) DOSPUNTOS CORIZQ (= isTipo tipo) ';' NUMBER CORDER IGUAL (= ex1 expression) ';' {	
      num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
     $instr = instruction.NewDeclaration($id.text,$isTipo.p,$ex1.p, true,$muteable.arr,$ex1.start.GetLine(),$ex1.start.GetColumn(),num,false)	}) (ALT (= id ID) '=' expression ';' {$instr = instruction.NewAssignment($id.text,$expression.p)}) (ALT P_IF expression LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewIf($expression.p, $instrucciones.l,nil,nil)}) (ALT P_IF expression LLAVEIZQ (= i1 instrucciones) LLAVEDER P_ELSE LLAVEIZQ (= i2 instrucciones) LLAVEDER {$instr = instruction.NewIf($expression.p, $i1.l,nil,$i2.l)}) (ALT P_IF expression LLAVEIZQ (= i1 instrucciones) LLAVEDER (= d2 listaelseif) P_ELSE LLAVEIZQ (= i2 instrucciones) LLAVEDER {$instr = instruction.NewIf($expression.p, $i1.l,$d2.lista,$i2.l)}) (ALT P_WHILE expression LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewWhile($expression.p, $instrucciones.l)}) (ALT P_LOOP LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewLoop($instrucciones.l)}) (ALT P_FOR (= id ID) P_IN (= f2 expression) LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewForin($id.text,$f2.p,$instrucciones.l)}) (ALT P_BREAK ';' {$instr = instruction.NewBreak(interfaces.BREAK,$P_BREAK.line,$P_BREAK.pos)}) (ALT P_CONTINUE ';' {$instr = instruction.NewContinue(interfaces.CONTINUE,$P_CONTINUE.line,$P_CONTINUE.pos)}) (ALT (= id ID) PUNTO P_PUSH PARIZQ expression PARDER ';' {$instr = expresion.NewVectorNative($id.text,interfaces.PUSH,$expression.p)}))) (RULE listaelseif (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (* (BLOCK (ALT (+= list else_if)))) {
      listInt := localctx.(*ListaelseifContext).GetList()
                                                                            for _, e := range listInt {
                                                                                $lista.Add(e.GetInstr())
                                                                            }
    }))) (RULE else_if (returns interfaces.Instruction instr) (BLOCK (ALT P_ELSE P_IF expression LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewIf($expression.p, $instrucciones.l,nil,nil)}))) (RULE tipo (returns interfaces.TipoExpresion p) (BLOCK (ALT P_F64 {$p=interfaces.FLOAT}) (ALT P_I64 {$p=interfaces.INTEGER}) (ALT P_STRING {$p=interfaces.STRING}) (ALT P_STRING2 {$p=interfaces.STRING}))) (RULE mut (returns bool arr) (BLOCK (ALT P_MUT { $arr = true }) (ALT EPSILON))) (RULE vector_st (returns bool arr) (BLOCK (ALT P_VECTOR DIFERENTE { $arr = true }) (ALT EPSILON))) (RULE array_st (returns bool arr) (BLOCK (ALT CORIZQ CORDER { $arr = true }) (ALT EPSILON))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= opIz expr_arit) (= op (BLOCK (ALT '*') (ALT '/'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '+') (ALT '-'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= reservada (BLOCK (ALT P_F64) (ALT P_I64))) DOSPUNTOS DOSPUNTOS (= op (BLOCK (ALT P_POW) (ALT P_POWF))) PARIZQ (= opIz expr_arit) COMA (= opDe expr_arit) PARDER {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '<') (ALT '<=') (ALT '>=') (ALT '>') (ALT MODULO) (ALT DIFERENTEDE))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op IGUALIGUA) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT OR) (ALT AND))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= op DIFERENTE) (= opDe expr_arit) {$p = expresion.NewOperacion(nil,$op.text,$opDe.p,false,$opDe.start.GetLine(),$opDe.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_ABS) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_SQRT) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_TOSTRING) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_CLONE) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT CORIZQ listValues CORDER { $p = expresion.NewArray($listValues.l,nil) }) (ALT CORIZQ listValues ';' expr_arit CORDER { $p = expresion.NewArray($listValues.l,$expr_arit.p) }) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}))) (RULE listValues (returns *arrayList.List l) (BLOCK (ALT (= list listValues) ',' expression { 
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                    }) (ALT expression { 
                    $l = arrayList.New()
                    $l.Add($expression.p)
                }))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       }) (ALT SUB NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (-num,interfaces.INTEGER)
       }) (ALT SUB DECIMAL {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (-a,interfaces.FLOAT)
       }) (ALT STRING { 
              
      str:= $STRING.text[1:len($STRING.text)-1]
     
      $p = expresion.NewPrimitivo(str,interfaces.STRING)}) (ALT DECIMAL {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       }) (ALT DECIMAL P_AS P_I64 {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
            a := int(num)
            $p = expresion.NewPrimitivo (a,interfaces.INTEGER)
       }) (ALT NUMBER P_AS P_F64 {
           num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            a := float64(num)  
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       }) (ALT (= list listArray) { $p = $list.p}) (ALT P_TRUE {      
      $p = expresion.NewPrimitivo("true",interfaces.TRUE)}) (ALT P_FALSE {      
      $p = expresion.NewPrimitivo("false",interfaces.FALSE)}))) (RULE listArray (returns interfaces.Expresion p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expresion.NewArrayAccess($list.p, $expression.p) }) (ALT ID { $p = expresion.NewCallVariable($ID.text)})))))
2022-03-22 21:14:31:333 grammar LogManager.java:25 after: (PARSER_GRAMMAR Chems (OPTIONS (= tokenVocab ChemsLexer)) (@ header {
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"

}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT PRINTLN DIFERENTE PARIZQ expression PARDER ';' {$instr = instruction.NewImprimir($expression.p,false)}) (ALT PRINT DIFERENTE PARIZQ expression PARDER ';' {$instr = instruction.NewImprimir($expression.p,true)}) (ALT P_LET (= muteable mut) (= isArray array_st) (= id ID) DOSPUNTOS (= isTipo tipo) IGUAL expression ';' {$instr = instruction.NewDeclaration($id.text,$isTipo.p,$expression.p, $isArray.arr,$muteable.arr,$expression.start.GetLine(),$expression.start.GetColumn(),0,false)	}) (ALT P_LET (= muteable mut) (= isArray array_st) (= id ID) IGUAL expression ';' {$instr = instruction.NewDeclaration($id.text,interfaces.NULL,$expression.p, $isArray.arr,$muteable.arr,$expression.start.GetLine(),$expression.start.GetColumn(),0,false)	}) (ALT P_LET (= muteable mut) (= isArray array_st) (= id ID) IGUAL (= isvector vector_st) expression ';' {$instr = instruction.NewDeclaration($id.text,interfaces.NULL,$expression.p, $isArray.arr,$muteable.arr,$expression.start.GetLine(),$expression.start.GetColumn(),0,$isvector.arr)	}) (ALT P_LET (= muteable mut) (= id ID) DOSPUNTOS CORIZQ (= isTipo tipo) ';' NUMBER CORDER IGUAL (= ex1 expression) ';' {	
      num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
     $instr = instruction.NewDeclaration($id.text,$isTipo.p,$ex1.p, true,$muteable.arr,$ex1.start.GetLine(),$ex1.start.GetColumn(),num,false)	}) (ALT (= id ID) '=' expression ';' {$instr = instruction.NewAssignment($id.text,$expression.p)}) (ALT P_IF expression LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewIf($expression.p, $instrucciones.l,nil,nil)}) (ALT P_IF expression LLAVEIZQ (= i1 instrucciones) LLAVEDER P_ELSE LLAVEIZQ (= i2 instrucciones) LLAVEDER {$instr = instruction.NewIf($expression.p, $i1.l,nil,$i2.l)}) (ALT P_IF expression LLAVEIZQ (= i1 instrucciones) LLAVEDER (= d2 listaelseif) P_ELSE LLAVEIZQ (= i2 instrucciones) LLAVEDER {$instr = instruction.NewIf($expression.p, $i1.l,$d2.lista,$i2.l)}) (ALT P_WHILE expression LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewWhile($expression.p, $instrucciones.l)}) (ALT P_LOOP LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewLoop($instrucciones.l)}) (ALT P_FOR (= id ID) P_IN (= f2 expression) LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewForin($id.text,$f2.p,$instrucciones.l)}) (ALT P_BREAK ';' {$instr = instruction.NewBreak(interfaces.BREAK,$P_BREAK.line,$P_BREAK.pos)}) (ALT P_CONTINUE ';' {$instr = instruction.NewContinue(interfaces.CONTINUE,$P_CONTINUE.line,$P_CONTINUE.pos)}) (ALT (= id ID) PUNTO P_PUSH PARIZQ expression PARDER ';' {$instr = expresion.NewVectorNative($id.text,interfaces.PUSH,$expression.p)}))) (RULE listaelseif (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (* (BLOCK (ALT (+= list else_if)))) {
      listInt := localctx.(*ListaelseifContext).GetList()
                                                                            for _, e := range listInt {
                                                                                $lista.Add(e.GetInstr())
                                                                            }
    }))) (RULE else_if (returns interfaces.Instruction instr) (BLOCK (ALT P_ELSE P_IF expression LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewIf($expression.p, $instrucciones.l,nil,nil)}))) (RULE tipo (returns interfaces.TipoExpresion p) (BLOCK (ALT P_F64 {$p=interfaces.FLOAT}) (ALT P_I64 {$p=interfaces.INTEGER}) (ALT P_STRING {$p=interfaces.STRING}) (ALT P_STRING2 {$p=interfaces.STRING}))) (RULE mut (returns bool arr) (BLOCK (ALT P_MUT { $arr = true }) (ALT EPSILON))) (RULE vector_st (returns bool arr) (BLOCK (ALT P_VECTOR DIFERENTE { $arr = true }) (ALT EPSILON))) (RULE array_st (returns bool arr) (BLOCK (ALT CORIZQ CORDER { $arr = true }) (ALT EPSILON))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= opIz expr_arit) (= op (SET '*' '/')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (SET '+' '-')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= reservada (SET P_F64 P_I64)) DOSPUNTOS DOSPUNTOS (= op (SET P_POW P_POWF)) PARIZQ (= opIz expr_arit) COMA (= opDe expr_arit) PARDER {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (SET '<' '<=' '>=' '>' MODULO DIFERENTEDE)) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op IGUALIGUA) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (SET OR AND)) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= op DIFERENTE) (= opDe expr_arit) {$p = expresion.NewOperacion(nil,$op.text,$opDe.p,false,$opDe.start.GetLine(),$opDe.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_ABS) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_SQRT) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_TOSTRING) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_CLONE) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT CORIZQ listValues CORDER { $p = expresion.NewArray($listValues.l,nil) }) (ALT CORIZQ listValues ';' expr_arit CORDER { $p = expresion.NewArray($listValues.l,$expr_arit.p) }) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}))) (RULE listValues (returns *arrayList.List l) (BLOCK (ALT (= list listValues) ',' expression { 
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                    }) (ALT expression { 
                    $l = arrayList.New()
                    $l.Add($expression.p)
                }))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       }) (ALT SUB NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (-num,interfaces.INTEGER)
       }) (ALT SUB DECIMAL {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (-a,interfaces.FLOAT)
       }) (ALT STRING { 
              
      str:= $STRING.text[1:len($STRING.text)-1]
     
      $p = expresion.NewPrimitivo(str,interfaces.STRING)}) (ALT DECIMAL {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       }) (ALT DECIMAL P_AS P_I64 {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
            a := int(num)
            $p = expresion.NewPrimitivo (a,interfaces.INTEGER)
       }) (ALT NUMBER P_AS P_F64 {
           num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            a := float64(num)  
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       }) (ALT (= list listArray) { $p = $list.p}) (ALT P_TRUE {      
      $p = expresion.NewPrimitivo("true",interfaces.TRUE)}) (ALT P_FALSE {      
      $p = expresion.NewPrimitivo("false",interfaces.FALSE)}))) (RULE listArray (returns interfaces.Expresion p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expresion.NewArrayAccess($list.p, $expression.p) }) (ALT ID { $p = expresion.NewCallVariable($ID.text)})))))
2022-03-22 21:14:31:421 left-recursion LogManager.java:25 expr_arit returns [interfaces.Expresion p]
    :   ( {} reservada=(P_F64<tokenIndex=565>|P_I64<tokenIndex=567>) DOSPUNTOS<tokenIndex=570> DOSPUNTOS<tokenIndex=572> op=(P_POW<tokenIndex=577>|P_POWF<tokenIndex=579>) PARIZQ<tokenIndex=582> opIz = expr_arit<tokenIndex=588> COMA<tokenIndex=590> opDe = expr_arit<tokenIndex=596> PARDER<tokenIndex=598>{$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())} 
        | op=DIFERENTE<tokenIndex=681>  opDe = expr_arit<tokenIndex=687,p=9>  {$p = expresion.NewOperacion(nil,$op.text,$opDe.p,false,$opDe.start.GetLine(),$opDe.start.GetColumn())} 
        | CORIZQ<tokenIndex=773> listValues<tokenIndex=775> CORDER<tokenIndex=777> { $p = expresion.NewArray($listValues.l,nil) } 
        | CORIZQ<tokenIndex=783> listValues<tokenIndex=785> ';'<tokenIndex=787> expr_arit<tokenIndex=789> CORDER<tokenIndex=791> { $p = expresion.NewArray($listValues.l,$expr_arit.p) } 
        | primitivo<tokenIndex=797> {$p = $primitivo.p} 
        | PARIZQ<tokenIndex=803> expression<tokenIndex=805> PARDER<tokenIndex=807> {$p = $expression.p} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=('*'<tokenIndex=523>|'/'<tokenIndex=525>) opDe = expr_arit<tokenIndex=532,p=16> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=('+'<tokenIndex=547>|'-'<tokenIndex=549>) opDe = expr_arit<tokenIndex=556,p=15> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=('<'<tokenIndex=612>|'<='<tokenIndex=614>|'>='<tokenIndex=616>|'>'<tokenIndex=618>|MODULO<tokenIndex=620>|DIFERENTEDE<tokenIndex=622>) opDe = expr_arit<tokenIndex=629,p=13> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=IGUALIGUA<tokenIndex=643> opDe = expr_arit<tokenIndex=649,p=12>  {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=(OR<tokenIndex=664>|AND<tokenIndex=666>) opDe = expr_arit<tokenIndex=673,p=11>  {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> PUNTO<tokenIndex=699> op=P_ABS<tokenIndex=703> PARIZQ<tokenIndex=705> PARDER<tokenIndex=707> {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> PUNTO<tokenIndex=719> op=P_SQRT<tokenIndex=723> PARIZQ<tokenIndex=725> PARDER<tokenIndex=727> {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> PUNTO<tokenIndex=739> op=P_TOSTRING<tokenIndex=743> PARIZQ<tokenIndex=745> PARDER<tokenIndex=747> {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> PUNTO<tokenIndex=759> op=P_CLONE<tokenIndex=763> PARIZQ<tokenIndex=765> PARDER<tokenIndex=767> {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}
        )*
    ;
2022-03-22 21:14:31:430 grammar LogManager.java:25 added: (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (= reservada (SET (P_F64 (ELEMENT_OPTIONS (= tokenIndex 565))) (P_I64 (ELEMENT_OPTIONS (= tokenIndex 567))))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 570))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 572))) (= op (SET (P_POW (ELEMENT_OPTIONS (= tokenIndex 577))) (P_POWF (ELEMENT_OPTIONS (= tokenIndex 579))))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 582))) (= opIz (expr_arit (ELEMENT_OPTIONS (= tokenIndex 588)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 590))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 596)))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 598))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= op (DIFERENTE (ELEMENT_OPTIONS (= tokenIndex 681)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 687) (= p 9)))) {$p = expresion.NewOperacion(nil,$op.text,$opDe.p,false,$opDe.start.GetLine(),$opDe.start.GetColumn())}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 773))) (listValues (ELEMENT_OPTIONS (= tokenIndex 775))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 777))) { $p = expresion.NewArray($listValues.l,nil) }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 783))) (listValues (ELEMENT_OPTIONS (= tokenIndex 785))) (';' (ELEMENT_OPTIONS (= tokenIndex 787))) (expr_arit (ELEMENT_OPTIONS (= tokenIndex 789))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 791))) { $p = expresion.NewArray($listValues.l,$expr_arit.p) }) (ALT (primitivo (ELEMENT_OPTIONS (= tokenIndex 797))) {$p = $primitivo.p}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 803))) (expression (ELEMENT_OPTIONS (= tokenIndex 805))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 807))) {$p = $expression.p})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 523))) ('/' (ELEMENT_OPTIONS (= tokenIndex 525))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 532) (= p 16)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 547))) ('-' (ELEMENT_OPTIONS (= tokenIndex 549))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 556) (= p 15)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 612))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 614))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 616))) ('>' (ELEMENT_OPTIONS (= tokenIndex 618))) (MODULO (ELEMENT_OPTIONS (= tokenIndex 620))) (DIFERENTEDE (ELEMENT_OPTIONS (= tokenIndex 622))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 629) (= p 13)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (IGUALIGUA (ELEMENT_OPTIONS (= tokenIndex 643)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 649) (= p 12)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (SET (OR (ELEMENT_OPTIONS (= tokenIndex 664))) (AND (ELEMENT_OPTIONS (= tokenIndex 666))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 673) (= p 11)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 699))) (= op (P_ABS (ELEMENT_OPTIONS (= tokenIndex 703)))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 705))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 707))) {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 719))) (= op (P_SQRT (ELEMENT_OPTIONS (= tokenIndex 723)))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 725))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 727))) {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 739))) (= op (P_TOSTRING (ELEMENT_OPTIONS (= tokenIndex 743)))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 745))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 747))) {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 759))) (= op (P_CLONE (ELEMENT_OPTIONS (= tokenIndex 763)))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 765))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 767))) {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}))))))
2022-03-22 21:14:31:463 left-recursion LogManager.java:25 listValues returns [*arrayList.List l]
    :   ( {} expression<tokenIndex=832> { 
                    $l = arrayList.New()
                    $l.Add($expression.p)
                } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=824> expression<tokenIndex=826> { 
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                              }
        )*
    ;
2022-03-22 21:14:31:463 grammar LogManager.java:25 added: (RULE listValues (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 832))) { 
                    $l = arrayList.New()
                    $l.Add($expression.p)
                })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 824))) (expression (ELEMENT_OPTIONS (= tokenIndex 826))) { 
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                              }))))))
2022-03-22 21:14:31:490 left-recursion LogManager.java:25 listArray returns [interfaces.Expresion p]
    :   ( {} ID<tokenIndex=935> { $p = expresion.NewCallVariable($ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=925> expression<tokenIndex=927> CORDER<tokenIndex=929> { $p = expresion.NewArrayAccess($list.p, $expression.p) }
        )*
    ;
2022-03-22 21:14:31:491 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 935))) { $p = expresion.NewCallVariable($ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 925))) (expression (ELEMENT_OPTIONS (= tokenIndex 927))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 929))) { $p = expresion.NewArrayAccess($list.p, $expression.p) }))))))
2022-03-22 21:14:31:501 grammar LogManager.java:25 import PRINTLN=1
2022-03-22 21:14:31:501 grammar LogManager.java:25 import PRINT=2
2022-03-22 21:14:31:501 grammar LogManager.java:25 import P_NUMBER=3
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_STRING=4
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_STRING2=5
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_IF=6
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_ELSE=7
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_WHILE=8
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_POW=9
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_POWF=10
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_I64=11
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_F64=12
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_LET=13
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_MUT=14
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_AS=15
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_TRUE=16
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_FALSE=17
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_MATCH=18
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_LOOP=19
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_ABS=20
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_SQRT=21
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_TOSTRING=22
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_CLONE=23
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_FOR=24
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_IN=25
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_BREAK=26
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_CONTINUE=27
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_VECTOR=28
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_PUSH=29
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_INSERT=30
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_REMOVE=31
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_CONTAINS=32
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_LEN=33
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_CAPACITY=34
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_NEW=35
2022-03-22 21:14:31:502 grammar LogManager.java:25 import P_WITHCAPACITY=36
2022-03-22 21:14:31:502 grammar LogManager.java:25 import NUMBER=37
2022-03-22 21:14:31:502 grammar LogManager.java:25 import DECIMAL=38
2022-03-22 21:14:31:502 grammar LogManager.java:25 import STRING=39
2022-03-22 21:14:31:502 grammar LogManager.java:25 import ID=40
2022-03-22 21:14:31:502 grammar LogManager.java:25 import PUNTO=41
2022-03-22 21:14:31:502 grammar LogManager.java:25 import PTCOMA=42
2022-03-22 21:14:31:502 grammar LogManager.java:25 import COMA=43
2022-03-22 21:14:31:502 grammar LogManager.java:25 import DOSPUNTOS=44
2022-03-22 21:14:31:502 grammar LogManager.java:25 import DIFERENTE=45
2022-03-22 21:14:31:502 grammar LogManager.java:25 import DIFERENTEDE=46
2022-03-22 21:14:31:502 grammar LogManager.java:25 import IGUAL=47
2022-03-22 21:14:31:502 grammar LogManager.java:25 import IGUALIGUA=48
2022-03-22 21:14:31:502 grammar LogManager.java:25 import MAYORIGUAL=49
2022-03-22 21:14:31:502 grammar LogManager.java:25 import MENORIGUAL=50
2022-03-22 21:14:31:502 grammar LogManager.java:25 import MAYOR=51
2022-03-22 21:14:31:502 grammar LogManager.java:25 import MENOR=52
2022-03-22 21:14:31:502 grammar LogManager.java:25 import MUL=53
2022-03-22 21:14:31:502 grammar LogManager.java:25 import DIV=54
2022-03-22 21:14:31:502 grammar LogManager.java:25 import MODULO=55
2022-03-22 21:14:31:502 grammar LogManager.java:25 import ADD=56
2022-03-22 21:14:31:502 grammar LogManager.java:25 import SUB=57
2022-03-22 21:14:31:502 grammar LogManager.java:25 import PARIZQ=58
2022-03-22 21:14:31:502 grammar LogManager.java:25 import PARDER=59
2022-03-22 21:14:31:502 grammar LogManager.java:25 import LLAVEIZQ=60
2022-03-22 21:14:31:502 grammar LogManager.java:25 import LLAVEDER=61
2022-03-22 21:14:31:502 grammar LogManager.java:25 import CORIZQ=62
2022-03-22 21:14:31:502 grammar LogManager.java:25 import CORDER=63
2022-03-22 21:14:31:502 grammar LogManager.java:25 import OR=64
2022-03-22 21:14:31:502 grammar LogManager.java:25 import AND=65
2022-03-22 21:14:31:502 grammar LogManager.java:25 import MULTICOMENT=66
2022-03-22 21:14:31:502 grammar LogManager.java:25 import WHITESPACE=67
2022-03-22 21:14:31:502 grammar LogManager.java:25 import 'println'=1
2022-03-22 21:14:31:502 grammar LogManager.java:25 import 'print'=2
2022-03-22 21:14:31:502 grammar LogManager.java:25 import 'number'=3
2022-03-22 21:14:31:502 grammar LogManager.java:25 import 'string'=4
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '&str'=5
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'if'=6
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'else'=7
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'while'=8
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'pow'=9
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'powf'=10
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'i64'=11
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'f64'=12
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'let'=13
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'mut'=14
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'as'=15
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'true'=16
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'false'=17
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'match'=18
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'loop'=19
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'abs'=20
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'sqrt'=21
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'to_string'=22
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'clone'=23
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'for'=24
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'in'=25
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'break'=26
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'continue'=27
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'vec'=28
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'push'=29
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'insert'=30
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'remove'=31
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'contains'=32
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'len'=33
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'capacity'=34
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'new'=35
2022-03-22 21:14:31:503 grammar LogManager.java:25 import 'with_capacity'=36
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '.'=41
2022-03-22 21:14:31:503 grammar LogManager.java:25 import ';'=42
2022-03-22 21:14:31:503 grammar LogManager.java:25 import ','=43
2022-03-22 21:14:31:503 grammar LogManager.java:25 import ':'=44
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '!'=45
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '!='=46
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '='=47
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '=='=48
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '>='=49
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '<='=50
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '>'=51
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '<'=52
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '*'=53
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '/'=54
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '%'=55
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '+'=56
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '-'=57
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '('=58
2022-03-22 21:14:31:503 grammar LogManager.java:25 import ')'=59
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '{'=60
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '}'=61
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '['=62
2022-03-22 21:14:31:503 grammar LogManager.java:25 import ']'=63
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '||'=64
2022-03-22 21:14:31:503 grammar LogManager.java:25 import '&&'=65
2022-03-22 21:14:31:503 grammar LogManager.java:25 tokens={PRINTLN=1, PRINT=2, P_NUMBER=3, P_STRING=4, P_STRING2=5, P_IF=6, P_ELSE=7, P_WHILE=8, P_POW=9, P_POWF=10, P_I64=11, P_F64=12, P_LET=13, P_MUT=14, P_AS=15, P_TRUE=16, P_FALSE=17, P_MATCH=18, P_LOOP=19, P_ABS=20, P_SQRT=21, P_TOSTRING=22, P_CLONE=23, P_FOR=24, P_IN=25, P_BREAK=26, P_CONTINUE=27, P_VECTOR=28, P_PUSH=29, P_INSERT=30, P_REMOVE=31, P_CONTAINS=32, P_LEN=33, P_CAPACITY=34, P_NEW=35, P_WITHCAPACITY=36, NUMBER=37, DECIMAL=38, STRING=39, ID=40, PUNTO=41, PTCOMA=42, COMA=43, DOSPUNTOS=44, DIFERENTE=45, DIFERENTEDE=46, IGUAL=47, IGUALIGUA=48, MAYORIGUAL=49, MENORIGUAL=50, MAYOR=51, MENOR=52, MUL=53, DIV=54, MODULO=55, ADD=56, SUB=57, PARIZQ=58, PARDER=59, LLAVEIZQ=60, LLAVEDER=61, CORIZQ=62, CORDER=63, OR=64, AND=65, MULTICOMENT=66, WHITESPACE=67, 'println'=1, 'print'=2, 'number'=3, 'string'=4, '&str'=5, 'if'=6, 'else'=7, 'while'=8, 'pow'=9, 'powf'=10, 'i64'=11, 'f64'=12, 'let'=13, 'mut'=14, 'as'=15, 'true'=16, 'false'=17, 'match'=18, 'loop'=19, 'abs'=20, 'sqrt'=21, 'to_string'=22, 'clone'=23, 'for'=24, 'in'=25, 'break'=26, 'continue'=27, 'vec'=28, 'push'=29, 'insert'=30, 'remove'=31, 'contains'=32, 'len'=33, 'capacity'=34, 'new'=35, 'with_capacity'=36, '.'=41, ';'=42, ','=43, ':'=44, '!'=45, '!='=46, '='=47, '=='=48, '>='=49, '<='=50, '>'=51, '<'=52, '*'=53, '/'=54, '%'=55, '+'=56, '-'=57, '('=58, ')'=59, '{'=60, '}'=61, '['=62, ']'=63, '||'=64, '&&'=65}
2022-03-22 21:14:31:504 semantics LogManager.java:25 tokens={EOF=-1, PRINTLN=1, PRINT=2, P_NUMBER=3, P_STRING=4, P_STRING2=5, P_IF=6, P_ELSE=7, P_WHILE=8, P_POW=9, P_POWF=10, P_I64=11, P_F64=12, P_LET=13, P_MUT=14, P_AS=15, P_TRUE=16, P_FALSE=17, P_MATCH=18, P_LOOP=19, P_ABS=20, P_SQRT=21, P_TOSTRING=22, P_CLONE=23, P_FOR=24, P_IN=25, P_BREAK=26, P_CONTINUE=27, P_VECTOR=28, P_PUSH=29, P_INSERT=30, P_REMOVE=31, P_CONTAINS=32, P_LEN=33, P_CAPACITY=34, P_NEW=35, P_WITHCAPACITY=36, NUMBER=37, DECIMAL=38, STRING=39, ID=40, PUNTO=41, PTCOMA=42, COMA=43, DOSPUNTOS=44, DIFERENTE=45, DIFERENTEDE=46, IGUAL=47, IGUALIGUA=48, MAYORIGUAL=49, MENORIGUAL=50, MAYOR=51, MENOR=52, MUL=53, DIV=54, MODULO=55, ADD=56, SUB=57, PARIZQ=58, PARDER=59, LLAVEIZQ=60, LLAVEDER=61, CORIZQ=62, CORDER=63, OR=64, AND=65, MULTICOMENT=66, WHITESPACE=67}
2022-03-22 21:14:31:504 semantics LogManager.java:25 strings={'println'=1, 'print'=2, 'number'=3, 'string'=4, '&str'=5, 'if'=6, 'else'=7, 'while'=8, 'pow'=9, 'powf'=10, 'i64'=11, 'f64'=12, 'let'=13, 'mut'=14, 'as'=15, 'true'=16, 'false'=17, 'match'=18, 'loop'=19, 'abs'=20, 'sqrt'=21, 'to_string'=22, 'clone'=23, 'for'=24, 'in'=25, 'break'=26, 'continue'=27, 'vec'=28, 'push'=29, 'insert'=30, 'remove'=31, 'contains'=32, 'len'=33, 'capacity'=34, 'new'=35, 'with_capacity'=36, '.'=41, ';'=42, ','=43, ':'=44, '!'=45, '!='=46, '='=47, '=='=48, '>='=49, '<='=50, '>'=51, '<'=52, '*'=53, '/'=54, '%'=55, '+'=56, '-'=57, '('=58, ')'=59, '{'=60, '}'=61, '['=62, ']'=63, '||'=64, '&&'=65}
2022-03-22 21:14:31:540 LL1 LogManager.java:25 
DECISION 0 in rule instrucciones
2022-03-22 21:14:31:540 LL1 LogManager.java:25 look=[{1..2, 6, 8, 13, 19, 24, 26..27, 40}, {<EOF>, 61}]
2022-03-22 21:14:31:540 LL1 LogManager.java:25 LL(1)? true
2022-03-22 21:14:31:540 LL1 LogManager.java:25 
DECISION 1 in rule instruccion
2022-03-22 21:14:31:540 LL1 LogManager.java:25 look=[1, 2, 13, 13, 13, 13, 40, 6, 6, 6, 8, 19, 24, 26, 27, 40]
2022-03-22 21:14:31:540 LL1 LogManager.java:25 LL(1)? false
2022-03-22 21:14:31:540 LL1 LogManager.java:25 
DECISION 2 in rule listaelseif
2022-03-22 21:14:31:540 LL1 LogManager.java:25 look=[7, 7]
2022-03-22 21:14:31:540 LL1 LogManager.java:25 LL(1)? false
2022-03-22 21:14:31:540 LL1 LogManager.java:25 
DECISION 3 in rule tipo
2022-03-22 21:14:31:540 LL1 LogManager.java:25 look=[12, 11, 4, 5]
2022-03-22 21:14:31:540 LL1 LogManager.java:25 LL(1)? true
2022-03-22 21:14:31:540 LL1 LogManager.java:25 
DECISION 4 in rule mut
2022-03-22 21:14:31:540 LL1 LogManager.java:25 look=[14, {40, 62}]
2022-03-22 21:14:31:540 LL1 LogManager.java:25 LL(1)? true
2022-03-22 21:14:31:540 LL1 LogManager.java:25 
DECISION 5 in rule vector_st
2022-03-22 21:14:31:541 LL1 LogManager.java:25 look=[28, {11..12, 16..17, 37..40, 45, 57..58, 62}]
2022-03-22 21:14:31:541 LL1 LogManager.java:25 LL(1)? true
2022-03-22 21:14:31:541 LL1 LogManager.java:25 
DECISION 6 in rule array_st
2022-03-22 21:14:31:541 LL1 LogManager.java:25 look=[62, 40]
2022-03-22 21:14:31:541 LL1 LogManager.java:25 LL(1)? true
2022-03-22 21:14:31:541 LL1 LogManager.java:25 
DECISION 7 in rule expr_arit
2022-03-22 21:14:31:541 LL1 LogManager.java:25 look=[{11..12}, 45, 62, 62, {16..17, 37..40, 57}, 58]
2022-03-22 21:14:31:541 LL1 LogManager.java:25 LL(1)? false
2022-03-22 21:14:31:541 LL1 LogManager.java:25 
DECISION 8 in rule expr_arit
2022-03-22 21:14:31:541 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null, null]
2022-03-22 21:14:31:541 LL1 LogManager.java:25 LL(1)? false
2022-03-22 21:14:31:541 LL1 LogManager.java:25 
DECISION 9 in rule expr_arit
2022-03-22 21:14:31:541 LL1 LogManager.java:25 look=[null, null]
2022-03-22 21:14:31:541 LL1 LogManager.java:25 LL(1)? false
2022-03-22 21:14:31:541 LL1 LogManager.java:25 
DECISION 10 in rule listValues
2022-03-22 21:14:31:541 LL1 LogManager.java:25 look=[null, {42, 63}]
2022-03-22 21:14:31:541 LL1 LogManager.java:25 LL(1)? false
2022-03-22 21:14:31:541 LL1 LogManager.java:25 
DECISION 11 in rule primitivo
2022-03-22 21:14:31:541 LL1 LogManager.java:25 look=[37, 57, 57, 39, 38, 38, 37, 40, 16, 17]
2022-03-22 21:14:31:541 LL1 LogManager.java:25 LL(1)? false
2022-03-22 21:14:31:541 LL1 LogManager.java:25 
DECISION 12 in rule listArray
2022-03-22 21:14:31:541 LL1 LogManager.java:25 look=[null, null]
2022-03-22 21:14:31:541 LL1 LogManager.java:25 LL(1)? false
2022-03-22 21:14:31:560 action-translator LogManager.java:25 translate 
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"


2022-03-22 21:14:31:595 action-translator LogManager.java:25 translate $lista = $instrucciones.l
2022-03-22 21:14:31:595 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,18:19]
2022-03-22 21:14:31:595 action-translator LogManager.java:25 qattr [@-1,10:22='instrucciones',<0>,18:28].[@-1,24:24='l',<0>,18:42]
2022-03-22 21:14:31:596 action-translator LogManager.java:25 translate 
    $l =  arrayList.New()
  
2022-03-22 21:14:31:596 action-translator LogManager.java:25 attr [@-1,7:7='l',<0>,23:5]
2022-03-22 21:14:31:597 action-translator LogManager.java:25 translate 
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    
2022-03-22 21:14:31:597 action-translator LogManager.java:25 attr [@-1,110:110='l',<0>,28:13]
2022-03-22 21:14:31:601 action-translator LogManager.java:25 translate $instr = instruction.NewImprimir($expression.p,false)
2022-03-22 21:14:31:601 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,35:52]
2022-03-22 21:14:31:601 action-translator LogManager.java:25 qattr [@-1,34:43='expression',<0>,35:85].[@-1,45:45='p',<0>,35:96]
2022-03-22 21:14:31:601 action-translator LogManager.java:25 translate $instr = instruction.NewImprimir($expression.p,true)
2022-03-22 21:14:31:601 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,36:50]
2022-03-22 21:14:31:601 action-translator LogManager.java:25 qattr [@-1,34:43='expression',<0>,36:83].[@-1,45:45='p',<0>,36:94]
2022-03-22 21:14:31:601 action-translator LogManager.java:25 translate $instr = instruction.NewDeclaration($id.text,$isTipo.p,$expression.p, $isArray.arr,$muteable.arr,$expression.start.GetLine(),$expression.start.GetColumn(),0,false)	
2022-03-22 21:14:31:601 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,37:89]
2022-03-22 21:14:31:601 action-translator LogManager.java:25 qattr [@-1,37:38='id',<0>,37:125].[@-1,40:43='text',<0>,37:128]
2022-03-22 21:14:31:601 action-translator LogManager.java:25 qattr [@-1,46:51='isTipo',<0>,37:134].[@-1,53:53='p',<0>,37:141]
2022-03-22 21:14:31:602 action-translator LogManager.java:25 qattr [@-1,56:65='expression',<0>,37:144].[@-1,67:67='p',<0>,37:155]
2022-03-22 21:14:31:602 action-translator LogManager.java:25 qattr [@-1,71:77='isArray',<0>,37:159].[@-1,79:81='arr',<0>,37:167]
2022-03-22 21:14:31:602 action-translator LogManager.java:25 qattr [@-1,84:91='muteable',<0>,37:172].[@-1,93:95='arr',<0>,37:181]
2022-03-22 21:14:31:602 action-translator LogManager.java:25 qattr [@-1,98:107='expression',<0>,37:186].[@-1,109:113='start',<0>,37:197]
2022-03-22 21:14:31:602 action-translator LogManager.java:25 qattr [@-1,126:135='expression',<0>,37:214].[@-1,137:141='start',<0>,37:225]
2022-03-22 21:14:31:602 action-translator LogManager.java:25 translate $instr = instruction.NewDeclaration($id.text,interfaces.NULL,$expression.p, $isArray.arr,$muteable.arr,$expression.start.GetLine(),$expression.start.GetColumn(),0,false)	
2022-03-22 21:14:31:602 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,38:67]
2022-03-22 21:14:31:602 action-translator LogManager.java:25 qattr [@-1,37:38='id',<0>,38:103].[@-1,40:43='text',<0>,38:106]
2022-03-22 21:14:31:602 action-translator LogManager.java:25 qattr [@-1,62:71='expression',<0>,38:128].[@-1,73:73='p',<0>,38:139]
2022-03-22 21:14:31:602 action-translator LogManager.java:25 qattr [@-1,77:83='isArray',<0>,38:143].[@-1,85:87='arr',<0>,38:151]
2022-03-22 21:14:31:602 action-translator LogManager.java:25 qattr [@-1,90:97='muteable',<0>,38:156].[@-1,99:101='arr',<0>,38:165]
2022-03-22 21:14:31:602 action-translator LogManager.java:25 qattr [@-1,104:113='expression',<0>,38:170].[@-1,115:119='start',<0>,38:181]
2022-03-22 21:14:31:602 action-translator LogManager.java:25 qattr [@-1,132:141='expression',<0>,38:198].[@-1,143:147='start',<0>,38:209]
2022-03-22 21:14:31:603 action-translator LogManager.java:25 translate $instr = instruction.NewDeclaration($id.text,interfaces.NULL,$expression.p, $isArray.arr,$muteable.arr,$expression.start.GetLine(),$expression.start.GetColumn(),0,$isvector.arr)	
2022-03-22 21:14:31:603 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,39:86]
2022-03-22 21:14:31:603 action-translator LogManager.java:25 qattr [@-1,37:38='id',<0>,39:122].[@-1,40:43='text',<0>,39:125]
2022-03-22 21:14:31:603 action-translator LogManager.java:25 qattr [@-1,62:71='expression',<0>,39:147].[@-1,73:73='p',<0>,39:158]
2022-03-22 21:14:31:603 action-translator LogManager.java:25 qattr [@-1,77:83='isArray',<0>,39:162].[@-1,85:87='arr',<0>,39:170]
2022-03-22 21:14:31:603 action-translator LogManager.java:25 qattr [@-1,90:97='muteable',<0>,39:175].[@-1,99:101='arr',<0>,39:184]
2022-03-22 21:14:31:603 action-translator LogManager.java:25 qattr [@-1,104:113='expression',<0>,39:189].[@-1,115:119='start',<0>,39:200]
2022-03-22 21:14:31:603 action-translator LogManager.java:25 qattr [@-1,132:141='expression',<0>,39:217].[@-1,143:147='start',<0>,39:228]
2022-03-22 21:14:31:603 action-translator LogManager.java:25 qattr [@-1,164:171='isvector',<0>,39:249].[@-1,173:175='arr',<0>,39:258]
2022-03-22 21:14:31:603 action-translator LogManager.java:25 translate 	
      num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
     $instr = instruction.NewDeclaration($id.text,$isTipo.p,$ex1.p, true,$muteable.arr,$ex1.start.GetLine(),$ex1.start.GetColumn(),num,false)	
2022-03-22 21:14:31:604 action-translator LogManager.java:25 qattr [@-1,34:39='NUMBER',<0>,41:31].[@-1,41:44='text',<0>,41:38]
2022-03-22 21:14:31:604 action-translator LogManager.java:25 attr [@-1,142:146='instr',<0>,45:6]
2022-03-22 21:14:31:604 action-translator LogManager.java:25 qattr [@-1,178:179='id',<0>,45:42].[@-1,181:184='text',<0>,45:45]
2022-03-22 21:14:31:604 action-translator LogManager.java:25 qattr [@-1,187:192='isTipo',<0>,45:51].[@-1,194:194='p',<0>,45:58]
2022-03-22 21:14:31:604 action-translator LogManager.java:25 qattr [@-1,197:199='ex1',<0>,45:61].[@-1,201:201='p',<0>,45:65]
2022-03-22 21:14:31:604 action-translator LogManager.java:25 qattr [@-1,210:217='muteable',<0>,45:74].[@-1,219:221='arr',<0>,45:83]
2022-03-22 21:14:31:604 action-translator LogManager.java:25 qattr [@-1,224:226='ex1',<0>,45:88].[@-1,228:232='start',<0>,45:92]
2022-03-22 21:14:31:604 action-translator LogManager.java:25 qattr [@-1,245:247='ex1',<0>,45:109].[@-1,249:253='start',<0>,45:113]
2022-03-22 21:14:31:604 action-translator LogManager.java:25 translate $instr = instruction.NewAssignment($id.text,$expression.p)
2022-03-22 21:14:31:604 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,46:29]
2022-03-22 21:14:31:604 action-translator LogManager.java:25 qattr [@-1,36:37='id',<0>,46:64].[@-1,39:42='text',<0>,46:67]
2022-03-22 21:14:31:604 action-translator LogManager.java:25 qattr [@-1,45:54='expression',<0>,46:73].[@-1,56:56='p',<0>,46:84]
2022-03-22 21:14:31:605 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p, $instrucciones.l,nil,nil)
2022-03-22 21:14:31:605 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,47:54]
2022-03-22 21:14:31:605 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,47:81].[@-1,39:39='p',<0>,47:92]
2022-03-22 21:14:31:605 action-translator LogManager.java:25 qattr [@-1,43:55='instrucciones',<0>,47:96].[@-1,57:57='l',<0>,47:110]
2022-03-22 21:14:31:605 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p, $i1.l,nil,$i2.l)
2022-03-22 21:14:31:605 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,48:98]
2022-03-22 21:14:31:605 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,48:125].[@-1,39:39='p',<0>,48:136]
2022-03-22 21:14:31:605 action-translator LogManager.java:25 qattr [@-1,43:44='i1',<0>,48:140].[@-1,46:46='l',<0>,48:143]
2022-03-22 21:14:31:605 action-translator LogManager.java:25 qattr [@-1,53:54='i2',<0>,48:150].[@-1,56:56='l',<0>,48:153]
2022-03-22 21:14:31:605 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p, $i1.l,$d2.lista,$i2.l)
2022-03-22 21:14:31:606 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,49:114]
2022-03-22 21:14:31:606 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,49:141].[@-1,39:39='p',<0>,49:152]
2022-03-22 21:14:31:606 action-translator LogManager.java:25 qattr [@-1,43:44='i1',<0>,49:156].[@-1,46:46='l',<0>,49:159]
2022-03-22 21:14:31:606 action-translator LogManager.java:25 qattr [@-1,49:50='d2',<0>,49:162].[@-1,52:56='lista',<0>,49:165]
2022-03-22 21:14:31:606 action-translator LogManager.java:25 qattr [@-1,59:60='i2',<0>,49:172].[@-1,62:62='l',<0>,49:175]
2022-03-22 21:14:31:606 action-translator LogManager.java:25 translate $instr = instruction.NewWhile($expression.p, $instrucciones.l)
2022-03-22 21:14:31:606 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,50:57]
2022-03-22 21:14:31:606 action-translator LogManager.java:25 qattr [@-1,31:40='expression',<0>,50:87].[@-1,42:42='p',<0>,50:98]
2022-03-22 21:14:31:607 action-translator LogManager.java:25 qattr [@-1,46:58='instrucciones',<0>,50:102].[@-1,60:60='l',<0>,50:116]
2022-03-22 21:14:31:607 action-translator LogManager.java:25 translate $instr = instruction.NewLoop($instrucciones.l)
2022-03-22 21:14:31:607 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,51:45]
2022-03-22 21:14:31:607 action-translator LogManager.java:25 qattr [@-1,30:42='instrucciones',<0>,51:74].[@-1,44:44='l',<0>,51:88]
2022-03-22 21:14:31:607 action-translator LogManager.java:25 translate $instr = instruction.NewForin($id.text,$f2.p,$instrucciones.l)
2022-03-22 21:14:31:607 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,52:70]
2022-03-22 21:14:31:607 action-translator LogManager.java:25 qattr [@-1,31:32='id',<0>,52:100].[@-1,34:37='text',<0>,52:103]
2022-03-22 21:14:31:607 action-translator LogManager.java:25 qattr [@-1,40:41='f2',<0>,52:109].[@-1,43:43='p',<0>,52:112]
2022-03-22 21:14:31:607 action-translator LogManager.java:25 qattr [@-1,46:58='instrucciones',<0>,52:115].[@-1,60:60='l',<0>,52:129]
2022-03-22 21:14:31:607 action-translator LogManager.java:25 translate $instr = instruction.NewBreak(interfaces.BREAK,$P_BREAK.line,$P_BREAK.pos)
2022-03-22 21:14:31:607 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,53:18]
2022-03-22 21:14:31:607 action-translator LogManager.java:25 qattr [@-1,48:54='P_BREAK',<0>,53:65].[@-1,56:59='line',<0>,53:73]
2022-03-22 21:14:31:607 action-translator LogManager.java:25 qattr [@-1,62:68='P_BREAK',<0>,53:79].[@-1,70:72='pos',<0>,53:87]
2022-03-22 21:14:31:607 action-translator LogManager.java:25 translate $instr = instruction.NewContinue(interfaces.CONTINUE,$P_CONTINUE.line,$P_CONTINUE.pos)
2022-03-22 21:14:31:607 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,54:19]
2022-03-22 21:14:31:607 action-translator LogManager.java:25 qattr [@-1,54:63='P_CONTINUE',<0>,54:72].[@-1,65:68='line',<0>,54:83]
2022-03-22 21:14:31:607 action-translator LogManager.java:25 qattr [@-1,71:80='P_CONTINUE',<0>,54:89].[@-1,82:84='pos',<0>,54:100]
2022-03-22 21:14:31:608 action-translator LogManager.java:25 translate $instr = expresion.NewVectorNative($id.text,interfaces.PUSH,$expression.p)
2022-03-22 21:14:31:608 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,55:50]
2022-03-22 21:14:31:608 action-translator LogManager.java:25 qattr [@-1,36:37='id',<0>,55:85].[@-1,39:42='text',<0>,55:88]
2022-03-22 21:14:31:608 action-translator LogManager.java:25 qattr [@-1,61:70='expression',<0>,55:110].[@-1,72:72='p',<0>,55:121]
2022-03-22 21:14:31:608 action-translator LogManager.java:25 translate  $lista = arrayList.New()
2022-03-22 21:14:31:608 action-translator LogManager.java:25 attr [@-1,2:6='lista',<0>,58:7]
2022-03-22 21:14:31:608 action-translator LogManager.java:25 translate 
      listInt := localctx.(*ListaelseifContext).GetList()
                                                                            for _, e := range listInt {
                                                                                $lista.Add(e.GetInstr())
                                                                            }
    
2022-03-22 21:14:31:608 action-translator LogManager.java:25 attr [@-1,247:251='lista',<0>,62:81]
2022-03-22 21:14:31:609 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p, $instrucciones.l,nil,nil)
2022-03-22 21:14:31:609 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,67:63]
2022-03-22 21:14:31:609 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,67:90].[@-1,39:39='p',<0>,67:101]
2022-03-22 21:14:31:609 action-translator LogManager.java:25 qattr [@-1,43:55='instrucciones',<0>,67:105].[@-1,57:57='l',<0>,67:119]
2022-03-22 21:14:31:609 action-translator LogManager.java:25 translate $p=interfaces.FLOAT
2022-03-22 21:14:31:609 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,71:7]
2022-03-22 21:14:31:609 action-translator LogManager.java:25 translate $p=interfaces.INTEGER
2022-03-22 21:14:31:609 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,72:7]
2022-03-22 21:14:31:609 action-translator LogManager.java:25 translate $p=interfaces.STRING
2022-03-22 21:14:31:609 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,73:10]
2022-03-22 21:14:31:610 action-translator LogManager.java:25 translate $p=interfaces.STRING
2022-03-22 21:14:31:610 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,74:11]
2022-03-22 21:14:31:610 action-translator LogManager.java:25 translate  $arr = true 
2022-03-22 21:14:31:610 action-translator LogManager.java:25 attr [@-1,2:4='arr',<0>,77:9]
2022-03-22 21:14:31:611 action-translator LogManager.java:25 translate  $arr = true 
2022-03-22 21:14:31:611 action-translator LogManager.java:25 attr [@-1,2:4='arr',<0>,81:26]
2022-03-22 21:14:31:611 action-translator LogManager.java:25 translate  $arr = true 
2022-03-22 21:14:31:611 action-translator LogManager.java:25 attr [@-1,2:4='arr',<0>,85:21]
2022-03-22 21:14:31:611 action-translator LogManager.java:25 translate $p = $expr_arit.p
2022-03-22 21:14:31:611 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,90:20]
2022-03-22 21:14:31:611 action-translator LogManager.java:25 qattr [@-1,6:14='expr_arit',<0>,90:25].[@-1,16:16='p',<0>,90:35]
2022-03-22 21:14:31:613 action-translator LogManager.java:25 translate 
2022-03-22 21:14:31:613 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-22 21:14:31:613 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:304]
2022-03-22 21:14:31:613 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,2:332].[@-1,34:34='p',<0>,2:337]
2022-03-22 21:14:31:613 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,2:340].[@-1,40:43='text',<0>,2:343]
2022-03-22 21:14:31:613 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,2:349].[@-1,51:51='p',<0>,2:354]
2022-03-22 21:14:31:613 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,2:363].[@-1,65:69='start',<0>,2:368]
2022-03-22 21:14:31:613 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,2:385].[@-1,87:91='start',<0>,2:390]
2022-03-22 21:14:31:614 action-translator LogManager.java:25 translate $p = expresion.NewOperacion(nil,$op.text,$opDe.p,false,$opDe.start.GetLine(),$opDe.start.GetColumn())
2022-03-22 21:14:31:614 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,3:79]
2022-03-22 21:14:31:614 action-translator LogManager.java:25 qattr [@-1,33:34='op',<0>,3:111].[@-1,36:39='text',<0>,3:114]
2022-03-22 21:14:31:614 action-translator LogManager.java:25 qattr [@-1,42:45='opDe',<0>,3:120].[@-1,47:47='p',<0>,3:125]
2022-03-22 21:14:31:614 action-translator LogManager.java:25 qattr [@-1,56:59='opDe',<0>,3:134].[@-1,61:65='start',<0>,3:139]
2022-03-22 21:14:31:614 action-translator LogManager.java:25 qattr [@-1,78:81='opDe',<0>,3:156].[@-1,83:87='start',<0>,3:161]
2022-03-22 21:14:31:614 action-translator LogManager.java:25 translate  $p = expresion.NewArray($listValues.l,nil) 
2022-03-22 21:14:31:614 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,4:85]
2022-03-22 21:14:31:614 action-translator LogManager.java:25 qattr [@-1,26:35='listValues',<0>,4:109].[@-1,37:37='l',<0>,4:120]
2022-03-22 21:14:31:614 action-translator LogManager.java:25 translate  $p = expresion.NewArray($listValues.l,$expr_arit.p) 
2022-03-22 21:14:31:614 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:131]
2022-03-22 21:14:31:615 action-translator LogManager.java:25 qattr [@-1,26:35='listValues',<0>,5:155].[@-1,37:37='l',<0>,5:166]
2022-03-22 21:14:31:615 action-translator LogManager.java:25 qattr [@-1,40:48='expr_arit',<0>,5:169].[@-1,50:50='p',<0>,5:179]
2022-03-22 21:14:31:615 action-translator LogManager.java:25 translate $p = $primitivo.p
2022-03-22 21:14:31:615 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,6:37]
2022-03-22 21:14:31:615 action-translator LogManager.java:25 qattr [@-1,6:14='primitivo',<0>,6:42].[@-1,16:16='p',<0>,6:52]
2022-03-22 21:14:31:615 action-translator LogManager.java:25 translate $p = $expression.p
2022-03-22 21:14:31:615 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,7:84]
2022-03-22 21:14:31:615 action-translator LogManager.java:25 qattr [@-1,6:15='expression',<0>,7:89].[@-1,17:17='p',<0>,7:100]
2022-03-22 21:14:31:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2022-03-22 21:14:31:615 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-22 21:14:31:616 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,10:144]
2022-03-22 21:14:31:616 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,10:172].[@-1,34:34='p',<0>,10:177]
2022-03-22 21:14:31:616 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,10:180].[@-1,40:43='text',<0>,10:183]
2022-03-22 21:14:31:616 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,10:189].[@-1,51:51='p',<0>,10:194]
2022-03-22 21:14:31:616 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,10:203].[@-1,65:69='start',<0>,10:208]
2022-03-22 21:14:31:616 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,10:225].[@-1,87:91='start',<0>,10:230]
2022-03-22 21:14:31:616 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2022-03-22 21:14:31:616 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-22 21:14:31:616 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,11:154]
2022-03-22 21:14:31:616 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,11:182].[@-1,34:34='p',<0>,11:187]
2022-03-22 21:14:31:616 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,11:190].[@-1,40:43='text',<0>,11:193]
2022-03-22 21:14:31:616 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,11:199].[@-1,51:51='p',<0>,11:204]
2022-03-22 21:14:31:616 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,11:213].[@-1,65:69='start',<0>,11:218]
2022-03-22 21:14:31:616 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,11:235].[@-1,87:91='start',<0>,11:240]
2022-03-22 21:14:31:617 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2022-03-22 21:14:31:617 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-22 21:14:31:617 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,12:247]
2022-03-22 21:14:31:617 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,12:275].[@-1,34:34='p',<0>,12:280]
2022-03-22 21:14:31:619 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,12:283].[@-1,40:43='text',<0>,12:286]
2022-03-22 21:14:31:619 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,12:292].[@-1,51:51='p',<0>,12:297]
2022-03-22 21:14:31:619 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,12:306].[@-1,65:69='start',<0>,12:311]
2022-03-22 21:14:31:620 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,12:328].[@-1,87:91='start',<0>,12:333]
2022-03-22 21:14:31:620 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-03-22 21:14:31:620 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-22 21:14:31:620 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,13:139]
2022-03-22 21:14:31:620 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,13:167].[@-1,34:34='p',<0>,13:172]
2022-03-22 21:14:31:620 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,13:175].[@-1,40:43='text',<0>,13:178]
2022-03-22 21:14:31:620 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,13:184].[@-1,51:51='p',<0>,13:189]
2022-03-22 21:14:31:620 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,13:198].[@-1,65:69='start',<0>,13:203]
2022-03-22 21:14:31:620 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,13:220].[@-1,87:91='start',<0>,13:225]
2022-03-22 21:14:31:620 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-03-22 21:14:31:620 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-22 21:14:31:621 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,14:154]
2022-03-22 21:14:31:621 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,14:182].[@-1,34:34='p',<0>,14:187]
2022-03-22 21:14:31:621 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,14:190].[@-1,40:43='text',<0>,14:193]
2022-03-22 21:14:31:621 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,14:199].[@-1,51:51='p',<0>,14:204]
2022-03-22 21:14:31:621 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,14:213].[@-1,65:69='start',<0>,14:218]
2022-03-22 21:14:31:621 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,14:235].[@-1,87:91='start',<0>,14:240]
2022-03-22 21:14:31:621 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-03-22 21:14:31:621 action-translator LogManager.java:25 translate $p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-22 21:14:31:621 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,15:162]
2022-03-22 21:14:31:621 action-translator LogManager.java:25 qattr [@-1,27:30='opIz',<0>,15:188].[@-1,32:32='p',<0>,15:193]
2022-03-22 21:14:31:621 action-translator LogManager.java:25 qattr [@-1,35:36='op',<0>,15:196].[@-1,38:41='text',<0>,15:199]
2022-03-22 21:14:31:622 action-translator LogManager.java:25 qattr [@-1,44:47='opIz',<0>,15:205].[@-1,49:53='start',<0>,15:210]
2022-03-22 21:14:31:622 action-translator LogManager.java:25 qattr [@-1,66:69='opIz',<0>,15:227].[@-1,71:75='start',<0>,15:232]
2022-03-22 21:14:31:622 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-03-22 21:14:31:622 action-translator LogManager.java:25 translate $p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-22 21:14:31:622 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,16:163]
2022-03-22 21:14:31:622 action-translator LogManager.java:25 qattr [@-1,27:30='opIz',<0>,16:189].[@-1,32:32='p',<0>,16:194]
2022-03-22 21:14:31:622 action-translator LogManager.java:25 qattr [@-1,35:36='op',<0>,16:197].[@-1,38:41='text',<0>,16:200]
2022-03-22 21:14:31:622 action-translator LogManager.java:25 qattr [@-1,44:47='opIz',<0>,16:206].[@-1,49:53='start',<0>,16:211]
2022-03-22 21:14:31:622 action-translator LogManager.java:25 qattr [@-1,66:69='opIz',<0>,16:228].[@-1,71:75='start',<0>,16:233]
2022-03-22 21:14:31:622 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-03-22 21:14:31:622 action-translator LogManager.java:25 translate $p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-22 21:14:31:622 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,17:167]
2022-03-22 21:14:31:622 action-translator LogManager.java:25 qattr [@-1,27:30='opIz',<0>,17:193].[@-1,32:32='p',<0>,17:198]
2022-03-22 21:14:31:622 action-translator LogManager.java:25 qattr [@-1,35:36='op',<0>,17:201].[@-1,38:41='text',<0>,17:204]
2022-03-22 21:14:31:622 action-translator LogManager.java:25 qattr [@-1,44:47='opIz',<0>,17:210].[@-1,49:53='start',<0>,17:215]
2022-03-22 21:14:31:622 action-translator LogManager.java:25 qattr [@-1,66:69='opIz',<0>,17:232].[@-1,71:75='start',<0>,17:237]
2022-03-22 21:14:31:623 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-22 21:14:31:623 action-translator LogManager.java:25 translate $p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-22 21:14:31:623 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,18:164]
2022-03-22 21:14:31:623 action-translator LogManager.java:25 qattr [@-1,27:30='opIz',<0>,18:190].[@-1,32:32='p',<0>,18:195]
2022-03-22 21:14:31:623 action-translator LogManager.java:25 qattr [@-1,35:36='op',<0>,18:198].[@-1,38:41='text',<0>,18:201]
2022-03-22 21:14:31:623 action-translator LogManager.java:25 qattr [@-1,44:47='opIz',<0>,18:207].[@-1,49:53='start',<0>,18:212]
2022-03-22 21:14:31:623 action-translator LogManager.java:25 qattr [@-1,66:69='opIz',<0>,18:229].[@-1,71:75='start',<0>,18:234]
2022-03-22 21:14:31:624 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2022-03-22 21:14:31:624 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2022-03-22 21:14:31:624 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2022-03-22 21:14:31:624 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-03-22 21:14:31:624 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-03-22 21:14:31:624 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-03-22 21:14:31:624 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-03-22 21:14:31:624 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-03-22 21:14:31:624 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-22 21:14:31:624 action-translator LogManager.java:25 translate 
2022-03-22 21:14:31:624 action-translator LogManager.java:25 translate  
                    $l = arrayList.New()
                    $l.Add($expression.p)
                
2022-03-22 21:14:31:624 action-translator LogManager.java:25 attr [@-1,24:24='l',<0>,3:21]
2022-03-22 21:14:31:624 action-translator LogManager.java:25 attr [@-1,66:66='l',<0>,4:21]
2022-03-22 21:14:31:625 action-translator LogManager.java:25 qattr [@-1,73:82='expression',<0>,4:28].[@-1,84:84='p',<0>,4:39]
2022-03-22 21:14:31:625 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-22 21:14:31:625 action-translator LogManager.java:25 translate  
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                              
2022-03-22 21:14:31:625 action-translator LogManager.java:25 qattr [@-1,54:57='list',<0>,9:51].[@-1,59:59='l',<0>,9:56]
2022-03-22 21:14:31:625 action-translator LogManager.java:25 qattr [@-1,66:75='expression',<0>,9:63].[@-1,77:77='p',<0>,9:74]
2022-03-22 21:14:31:625 action-translator LogManager.java:25 attr [@-1,132:132='l',<0>,10:51]
2022-03-22 21:14:31:625 action-translator LogManager.java:25 qattr [@-1,137:140='list',<0>,10:56].[@-1,142:142='l',<0>,10:61]
2022-03-22 21:14:31:625 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-22 21:14:31:626 action-translator LogManager.java:25 translate 
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       
2022-03-22 21:14:31:626 action-translator LogManager.java:25 qattr [@-1,40:45='NUMBER',<0>,125:38].[@-1,47:50='text',<0>,125:45]
2022-03-22 21:14:31:626 action-translator LogManager.java:25 attr [@-1,173:173='p',<0>,130:13]
2022-03-22 21:14:31:626 action-translator LogManager.java:25 translate 
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (-num,interfaces.INTEGER)
       
2022-03-22 21:14:31:626 action-translator LogManager.java:25 qattr [@-1,40:45='NUMBER',<0>,133:38].[@-1,47:50='text',<0>,133:45]
2022-03-22 21:14:31:626 action-translator LogManager.java:25 attr [@-1,173:173='p',<0>,138:13]
2022-03-22 21:14:31:626 action-translator LogManager.java:25 translate 
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (-a,interfaces.FLOAT)
       
2022-03-22 21:14:31:626 action-translator LogManager.java:25 qattr [@-1,46:52='DECIMAL',<0>,141:44].[@-1,54:57='text',<0>,141:52]
2022-03-22 21:14:31:626 action-translator LogManager.java:25 attr [@-1,202:202='p',<0>,146:13]
2022-03-22 21:14:31:626 action-translator LogManager.java:25 translate  
              
      str:= $STRING.text[1:len($STRING.text)-1]
     
      $p = expresion.NewPrimitivo(str,interfaces.STRING)
2022-03-22 21:14:31:626 action-translator LogManager.java:25 qattr [@-1,32:37='STRING',<0>,150:13].[@-1,39:42='text',<0>,150:20]
2022-03-22 21:14:31:626 action-translator LogManager.java:25 qattr [@-1,51:56='STRING',<0>,150:32].[@-1,58:61='text',<0>,150:39]
2022-03-22 21:14:31:627 action-translator LogManager.java:25 attr [@-1,82:82='p',<0>,152:7]
2022-03-22 21:14:31:627 action-translator LogManager.java:25 translate 
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       
2022-03-22 21:14:31:627 action-translator LogManager.java:25 qattr [@-1,46:52='DECIMAL',<0>,154:44].[@-1,54:57='text',<0>,154:52]
2022-03-22 21:14:31:627 action-translator LogManager.java:25 attr [@-1,202:202='p',<0>,159:13]
2022-03-22 21:14:31:627 action-translator LogManager.java:25 translate 
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
            a := int(num)
            $p = expresion.NewPrimitivo (a,interfaces.INTEGER)
       
2022-03-22 21:14:31:627 action-translator LogManager.java:25 qattr [@-1,46:52='DECIMAL',<0>,163:44].[@-1,54:57='text',<0>,163:52]
2022-03-22 21:14:31:627 action-translator LogManager.java:25 attr [@-1,192:192='p',<0>,168:13]
2022-03-22 21:14:31:627 action-translator LogManager.java:25 translate 
           num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            a := float64(num)  
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       
2022-03-22 21:14:31:627 action-translator LogManager.java:25 qattr [@-1,38:43='NUMBER',<0>,171:36].[@-1,45:48='text',<0>,171:43]
2022-03-22 21:14:31:627 action-translator LogManager.java:25 attr [@-1,186:186='p',<0>,176:13]
2022-03-22 21:14:31:627 action-translator LogManager.java:25 translate  $p = $list.p
2022-03-22 21:14:31:627 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,178:22]
2022-03-22 21:14:31:627 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,178:27].[@-1,12:12='p',<0>,178:32]
2022-03-22 21:14:31:627 action-translator LogManager.java:25 translate       
      $p = expresion.NewPrimitivo("true",interfaces.TRUE)
2022-03-22 21:14:31:627 action-translator LogManager.java:25 attr [@-1,15:15='p',<0>,180:7]
2022-03-22 21:14:31:628 action-translator LogManager.java:25 translate       
      $p = expresion.NewPrimitivo("false",interfaces.FALSE)
2022-03-22 21:14:31:628 action-translator LogManager.java:25 attr [@-1,15:15='p',<0>,182:7]
2022-03-22 21:14:31:628 action-translator LogManager.java:25 translate 
2022-03-22 21:14:31:628 action-translator LogManager.java:25 translate  $p = expresion.NewCallVariable($ID.text)
2022-03-22 21:14:31:628 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2022-03-22 21:14:31:628 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,2:65].[@-1,36:39='text',<0>,2:68]
2022-03-22 21:14:31:628 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-22 21:14:31:628 action-translator LogManager.java:25 translate  $p = expresion.NewArrayAccess($list.p, $expression.p) 
2022-03-22 21:14:31:628 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:133]
2022-03-22 21:14:31:628 action-translator LogManager.java:25 qattr [@-1,32:35='list',<0>,5:163].[@-1,37:37='p',<0>,5:168]
2022-03-22 21:14:31:628 action-translator LogManager.java:25 qattr [@-1,41:50='expression',<0>,5:172].[@-1,52:52='p',<0>,5:183]
2022-03-22 21:14:31:629 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-22 21:14:31:781 action-translator LogManager.java:25 translate 
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"


2022-03-22 21:14:31:781 action-translator LogManager.java:25 translate 
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"


2022-03-22 21:14:31:918 action-translator LogManager.java:25 translate 
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"


2022-03-22 21:14:31:918 action-translator LogManager.java:25 translate 
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"


