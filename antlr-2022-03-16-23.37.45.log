2022-03-16 23:37:45:486 grammar LogManager.java:25 before: (LEXER_GRAMMAR ChemsLexer (RULES (RULE PRINTLN (BLOCK (ALT 'println'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE P_NUMBER (BLOCK (ALT 'number'))) (RULE P_STRING (BLOCK (ALT 'string'))) (RULE P_IF (BLOCK (ALT 'if'))) (RULE P_ELSE (BLOCK (ALT 'else'))) (RULE P_WHILE (BLOCK (ALT 'while'))) (RULE P_POW (BLOCK (ALT 'pow'))) (RULE P_POWF (BLOCK (ALT 'powf'))) (RULE P_I64 (BLOCK (ALT 'i64'))) (RULE P_F64 (BLOCK (ALT 'f64'))) (RULE P_LET (BLOCK (ALT 'let'))) (RULE P_MUT (BLOCK (ALT 'mut'))) (RULE P_AS (BLOCK (ALT 'as'))) (RULE P_TRUE (BLOCK (ALT 'true'))) (RULE P_FALSE (BLOCK (ALT 'false'))) (RULE P_MATCH (BLOCK (ALT 'match'))) (RULE P_LOOP (BLOCK (ALT 'loop'))) (RULE P_ABS (BLOCK (ALT 'abs'))) (RULE P_SQRT (BLOCK (ALT 'sqrt'))) (RULE P_TOSTRING (BLOCK (ALT 'to_string'))) (RULE P_CLONE (BLOCK (ALT 'clone'))) (RULE P_FOR (BLOCK (ALT 'for'))) (RULE P_IN (BLOCK (ALT 'in'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DECIMAL (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE COMA (BLOCK (ALT ','))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE DIFERENTE (BLOCK (ALT '!'))) (RULE DIFERENTEDE (BLOCK (ALT '!='))) (RULE IGUAL (BLOCK (ALT '='))) (RULE IGUALIGUA (BLOCK (ALT '=='))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE MULTICOMENT (BLOCK (LEXER_ALT_ACTION (ALT [/] [*] (* (BLOCK (ALT [^*]))) (+ (BLOCK (ALT [*]))) (* (BLOCK (ALT [^/*] (* (BLOCK (ALT [^*]))) (+ (BLOCK (ALT [*])))))) [/]) skip))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2022-03-16 23:37:45:504 grammar LogManager.java:25 after: (LEXER_GRAMMAR ChemsLexer (RULES (RULE PRINTLN (BLOCK (ALT 'println'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE P_NUMBER (BLOCK (ALT 'number'))) (RULE P_STRING (BLOCK (ALT 'string'))) (RULE P_IF (BLOCK (ALT 'if'))) (RULE P_ELSE (BLOCK (ALT 'else'))) (RULE P_WHILE (BLOCK (ALT 'while'))) (RULE P_POW (BLOCK (ALT 'pow'))) (RULE P_POWF (BLOCK (ALT 'powf'))) (RULE P_I64 (BLOCK (ALT 'i64'))) (RULE P_F64 (BLOCK (ALT 'f64'))) (RULE P_LET (BLOCK (ALT 'let'))) (RULE P_MUT (BLOCK (ALT 'mut'))) (RULE P_AS (BLOCK (ALT 'as'))) (RULE P_TRUE (BLOCK (ALT 'true'))) (RULE P_FALSE (BLOCK (ALT 'false'))) (RULE P_MATCH (BLOCK (ALT 'match'))) (RULE P_LOOP (BLOCK (ALT 'loop'))) (RULE P_ABS (BLOCK (ALT 'abs'))) (RULE P_SQRT (BLOCK (ALT 'sqrt'))) (RULE P_TOSTRING (BLOCK (ALT 'to_string'))) (RULE P_CLONE (BLOCK (ALT 'clone'))) (RULE P_FOR (BLOCK (ALT 'for'))) (RULE P_IN (BLOCK (ALT 'in'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE DECIMAL (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE COMA (BLOCK (ALT ','))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE DIFERENTE (BLOCK (ALT '!'))) (RULE DIFERENTEDE (BLOCK (ALT '!='))) (RULE IGUAL (BLOCK (ALT '='))) (RULE IGUALIGUA (BLOCK (ALT '=='))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE MULTICOMENT (BLOCK (LEXER_ALT_ACTION (ALT [/] [*] (* (BLOCK (ALT [^*]))) (+ (BLOCK (ALT [*]))) (* (BLOCK (ALT [^/*] (* (BLOCK (ALT [^*]))) (+ (BLOCK (ALT [*])))))) [/]) skip))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
