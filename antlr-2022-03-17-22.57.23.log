2022-03-17 22:57:22:690 grammar LogManager.java:25 before: (PARSER_GRAMMAR Chems (OPTIONS (= tokenVocab ChemsLexer)) (@ header {
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"

}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT PRINTLN DIFERENTE PARIZQ expression PARDER ';' {$instr = instruction.NewImprimir($expression.p,false)}) (ALT PRINT DIFERENTE PARIZQ expression PARDER ';' {$instr = instruction.NewImprimir($expression.p,true)}) (ALT P_LET (= muteable mut) (= isArray array_st) (= id ID) DOSPUNTOS (= isTipo tipo) IGUAL expression ';' {$instr = instruction.NewDeclaration($id.text,$isTipo.p,$expression.p, $isArray.arr,$muteable.arr,$expression.start.GetLine(),$expression.start.GetColumn())	}) (ALT P_LET (= muteable mut) (= isArray array_st) (= id ID) IGUAL expression ';' {$instr = instruction.NewDeclaration($id.text,interfaces.NULL,$expression.p, $isArray.arr,$muteable.arr,$expression.start.GetLine(),$expression.start.GetColumn())	}) (ALT (= id ID) '=' expression ';' {$instr = instruction.NewAssignment($id.text,$expression.p)}) (ALT P_IF expression LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewIf($expression.p, $instrucciones.l,nil,nil)}) (ALT P_IF expression LLAVEIZQ (= i1 instrucciones) LLAVEDER P_ELSE LLAVEIZQ (= i2 instrucciones) LLAVEDER {$instr = instruction.NewIf($expression.p, $i1.l,nil,$i2.l)}) (ALT P_IF expression LLAVEIZQ (= i1 instrucciones) LLAVEDER (= d2 listaelseif) P_ELSE LLAVEIZQ (= i2 instrucciones) LLAVEDER {$instr = instruction.NewIf($expression.p, $i1.l,$d2.lista,$i2.l)}) (ALT P_WHILE expression LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewWhile($expression.p, $instrucciones.l)}) (ALT P_LOOP LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewLoop($instrucciones.l)}) (ALT P_FOR (= id ID) P_IN (= f2 expression) LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewForin($id.text,$f2.p,$instrucciones.l)}) (ALT P_BREAK ';' {$instr = instruction.NewBreak(interfaces.BREAK,$P_BREAK.line,$P_BREAK.pos)}))) (RULE listaelseif (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (* (BLOCK (ALT (+= list else_if)))) {
      listInt := localctx.(*ListaelseifContext).GetList()
                                                                            for _, e := range listInt {
                                                                                $lista.Add(e.GetInstr())
                                                                            }
    }))) (RULE else_if (returns interfaces.Instruction instr) (BLOCK (ALT P_ELSE P_IF expression LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewIf($expression.p, $instrucciones.l,nil,nil)}))) (RULE tipo (returns interfaces.TipoExpresion p) (BLOCK (ALT P_F64 {$p=interfaces.FLOAT}) (ALT P_I64 {$p=interfaces.INTEGER}) (ALT P_STRING {$p=interfaces.STRING}))) (RULE mut (returns bool arr) (BLOCK (ALT P_MUT { $arr = true }) (ALT EPSILON))) (RULE array_st (returns bool arr) (BLOCK (ALT CORIZQ CORDER { $arr = true }) (ALT EPSILON))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= opIz expr_arit) (= op (BLOCK (ALT '*') (ALT '/'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '+') (ALT '-'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= reservada (BLOCK (ALT P_F64) (ALT P_I64))) DOSPUNTOS DOSPUNTOS (= op (BLOCK (ALT P_POW) (ALT P_POWF))) PARIZQ (= opIz expr_arit) COMA (= opDe expr_arit) PARDER {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '<') (ALT '<=') (ALT '>=') (ALT '>') (ALT MODULO) (ALT DIFERENTEDE))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op IGUALIGUA) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT OR) (ALT AND))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= op DIFERENTE) (= opDe expr_arit) {$p = expresion.NewOperacion(nil,$op.text,$opDe.p,false,$opDe.start.GetLine(),$opDe.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_ABS) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_SQRT) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_TOSTRING) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_CLONE) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT CORIZQ listValues CORDER { $p = expresion.NewArray($listValues.l) }) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}))) (RULE listValues (returns *arrayList.List l) (BLOCK (ALT (= list listValues) ',' expression { 
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                    }) (ALT expression { 
                    $l = arrayList.New()
                    $l.Add($expression.p)
                }))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       }) (ALT SUB NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (-num,interfaces.INTEGER)
       }) (ALT SUB DECIMAL {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (-a,interfaces.FLOAT)
       }) (ALT STRING { 
              
      str:= $STRING.text[1:len($STRING.text)-1]
     
      $p = expresion.NewPrimitivo(str,interfaces.STRING)}) (ALT DECIMAL {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       }) (ALT DECIMAL P_AS P_I64 {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
            a := int(num)
            $p = expresion.NewPrimitivo (a,interfaces.INTEGER)
       }) (ALT NUMBER P_AS P_F64 {
           num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            a := float64(num)  
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       }) (ALT (= list listArray) { $p = $list.p}) (ALT P_TRUE {      
      $p = expresion.NewPrimitivo("true",interfaces.TRUE)}) (ALT P_FALSE {      
      $p = expresion.NewPrimitivo("false",interfaces.FALSE)}))) (RULE listArray (returns interfaces.Expresion p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expresion.NewArrayAccess($list.p, $expression.p) }) (ALT ID { $p = expresion.NewCallVariable($ID.text)})))))
2022-03-17 22:57:22:706 grammar LogManager.java:25 after: (PARSER_GRAMMAR Chems (OPTIONS (= tokenVocab ChemsLexer)) (@ header {
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"

}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT PRINTLN DIFERENTE PARIZQ expression PARDER ';' {$instr = instruction.NewImprimir($expression.p,false)}) (ALT PRINT DIFERENTE PARIZQ expression PARDER ';' {$instr = instruction.NewImprimir($expression.p,true)}) (ALT P_LET (= muteable mut) (= isArray array_st) (= id ID) DOSPUNTOS (= isTipo tipo) IGUAL expression ';' {$instr = instruction.NewDeclaration($id.text,$isTipo.p,$expression.p, $isArray.arr,$muteable.arr,$expression.start.GetLine(),$expression.start.GetColumn())	}) (ALT P_LET (= muteable mut) (= isArray array_st) (= id ID) IGUAL expression ';' {$instr = instruction.NewDeclaration($id.text,interfaces.NULL,$expression.p, $isArray.arr,$muteable.arr,$expression.start.GetLine(),$expression.start.GetColumn())	}) (ALT (= id ID) '=' expression ';' {$instr = instruction.NewAssignment($id.text,$expression.p)}) (ALT P_IF expression LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewIf($expression.p, $instrucciones.l,nil,nil)}) (ALT P_IF expression LLAVEIZQ (= i1 instrucciones) LLAVEDER P_ELSE LLAVEIZQ (= i2 instrucciones) LLAVEDER {$instr = instruction.NewIf($expression.p, $i1.l,nil,$i2.l)}) (ALT P_IF expression LLAVEIZQ (= i1 instrucciones) LLAVEDER (= d2 listaelseif) P_ELSE LLAVEIZQ (= i2 instrucciones) LLAVEDER {$instr = instruction.NewIf($expression.p, $i1.l,$d2.lista,$i2.l)}) (ALT P_WHILE expression LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewWhile($expression.p, $instrucciones.l)}) (ALT P_LOOP LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewLoop($instrucciones.l)}) (ALT P_FOR (= id ID) P_IN (= f2 expression) LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewForin($id.text,$f2.p,$instrucciones.l)}) (ALT P_BREAK ';' {$instr = instruction.NewBreak(interfaces.BREAK,$P_BREAK.line,$P_BREAK.pos)}))) (RULE listaelseif (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (* (BLOCK (ALT (+= list else_if)))) {
      listInt := localctx.(*ListaelseifContext).GetList()
                                                                            for _, e := range listInt {
                                                                                $lista.Add(e.GetInstr())
                                                                            }
    }))) (RULE else_if (returns interfaces.Instruction instr) (BLOCK (ALT P_ELSE P_IF expression LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewIf($expression.p, $instrucciones.l,nil,nil)}))) (RULE tipo (returns interfaces.TipoExpresion p) (BLOCK (ALT P_F64 {$p=interfaces.FLOAT}) (ALT P_I64 {$p=interfaces.INTEGER}) (ALT P_STRING {$p=interfaces.STRING}))) (RULE mut (returns bool arr) (BLOCK (ALT P_MUT { $arr = true }) (ALT EPSILON))) (RULE array_st (returns bool arr) (BLOCK (ALT CORIZQ CORDER { $arr = true }) (ALT EPSILON))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= opIz expr_arit) (= op (SET '*' '/')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (SET '+' '-')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= reservada (SET P_F64 P_I64)) DOSPUNTOS DOSPUNTOS (= op (SET P_POW P_POWF)) PARIZQ (= opIz expr_arit) COMA (= opDe expr_arit) PARDER {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (SET '<' '<=' '>=' '>' MODULO DIFERENTEDE)) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op IGUALIGUA) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (SET OR AND)) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= op DIFERENTE) (= opDe expr_arit) {$p = expresion.NewOperacion(nil,$op.text,$opDe.p,false,$opDe.start.GetLine(),$opDe.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_ABS) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_SQRT) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_TOSTRING) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_CLONE) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT CORIZQ listValues CORDER { $p = expresion.NewArray($listValues.l) }) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}))) (RULE listValues (returns *arrayList.List l) (BLOCK (ALT (= list listValues) ',' expression { 
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                    }) (ALT expression { 
                    $l = arrayList.New()
                    $l.Add($expression.p)
                }))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       }) (ALT SUB NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (-num,interfaces.INTEGER)
       }) (ALT SUB DECIMAL {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (-a,interfaces.FLOAT)
       }) (ALT STRING { 
              
      str:= $STRING.text[1:len($STRING.text)-1]
     
      $p = expresion.NewPrimitivo(str,interfaces.STRING)}) (ALT DECIMAL {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       }) (ALT DECIMAL P_AS P_I64 {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
            a := int(num)
            $p = expresion.NewPrimitivo (a,interfaces.INTEGER)
       }) (ALT NUMBER P_AS P_F64 {
           num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            a := float64(num)  
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       }) (ALT (= list listArray) { $p = $list.p}) (ALT P_TRUE {      
      $p = expresion.NewPrimitivo("true",interfaces.TRUE)}) (ALT P_FALSE {      
      $p = expresion.NewPrimitivo("false",interfaces.FALSE)}))) (RULE listArray (returns interfaces.Expresion p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expresion.NewArrayAccess($list.p, $expression.p) }) (ALT ID { $p = expresion.NewCallVariable($ID.text)})))))
2022-03-17 22:57:22:797 left-recursion LogManager.java:25 expr_arit returns [interfaces.Expresion p]
    :   ( {} reservada=(P_F64<tokenIndex=457>|P_I64<tokenIndex=459>) DOSPUNTOS<tokenIndex=462> DOSPUNTOS<tokenIndex=464> op=(P_POW<tokenIndex=469>|P_POWF<tokenIndex=471>) PARIZQ<tokenIndex=474> opIz = expr_arit<tokenIndex=480> COMA<tokenIndex=482> opDe = expr_arit<tokenIndex=488> PARDER<tokenIndex=490>{$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())} 
        | op=DIFERENTE<tokenIndex=573>  opDe = expr_arit<tokenIndex=579,p=8>  {$p = expresion.NewOperacion(nil,$op.text,$opDe.p,false,$opDe.start.GetLine(),$opDe.start.GetColumn())} 
        | CORIZQ<tokenIndex=665> listValues<tokenIndex=667> CORDER<tokenIndex=669> { $p = expresion.NewArray($listValues.l) } 
        | primitivo<tokenIndex=675> {$p = $primitivo.p} 
        | PARIZQ<tokenIndex=681> expression<tokenIndex=683> PARDER<tokenIndex=685> {$p = $expression.p} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=('*'<tokenIndex=415>|'/'<tokenIndex=417>) opDe = expr_arit<tokenIndex=424,p=15> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=('+'<tokenIndex=439>|'-'<tokenIndex=441>) opDe = expr_arit<tokenIndex=448,p=14> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=('<'<tokenIndex=504>|'<='<tokenIndex=506>|'>='<tokenIndex=508>|'>'<tokenIndex=510>|MODULO<tokenIndex=512>|DIFERENTEDE<tokenIndex=514>) opDe = expr_arit<tokenIndex=521,p=12> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=IGUALIGUA<tokenIndex=535> opDe = expr_arit<tokenIndex=541,p=11>  {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=(OR<tokenIndex=556>|AND<tokenIndex=558>) opDe = expr_arit<tokenIndex=565,p=10>  {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> PUNTO<tokenIndex=591> op=P_ABS<tokenIndex=595> PARIZQ<tokenIndex=597> PARDER<tokenIndex=599> {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> PUNTO<tokenIndex=611> op=P_SQRT<tokenIndex=615> PARIZQ<tokenIndex=617> PARDER<tokenIndex=619> {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> PUNTO<tokenIndex=631> op=P_TOSTRING<tokenIndex=635> PARIZQ<tokenIndex=637> PARDER<tokenIndex=639> {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> PUNTO<tokenIndex=651> op=P_CLONE<tokenIndex=655> PARIZQ<tokenIndex=657> PARDER<tokenIndex=659> {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}
        )*
    ;
2022-03-17 22:57:22:805 grammar LogManager.java:25 added: (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (= reservada (SET (P_F64 (ELEMENT_OPTIONS (= tokenIndex 457))) (P_I64 (ELEMENT_OPTIONS (= tokenIndex 459))))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 462))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 464))) (= op (SET (P_POW (ELEMENT_OPTIONS (= tokenIndex 469))) (P_POWF (ELEMENT_OPTIONS (= tokenIndex 471))))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 474))) (= opIz (expr_arit (ELEMENT_OPTIONS (= tokenIndex 480)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 482))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 488)))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 490))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= op (DIFERENTE (ELEMENT_OPTIONS (= tokenIndex 573)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 579) (= p 8)))) {$p = expresion.NewOperacion(nil,$op.text,$opDe.p,false,$opDe.start.GetLine(),$opDe.start.GetColumn())}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 665))) (listValues (ELEMENT_OPTIONS (= tokenIndex 667))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 669))) { $p = expresion.NewArray($listValues.l) }) (ALT (primitivo (ELEMENT_OPTIONS (= tokenIndex 675))) {$p = $primitivo.p}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 681))) (expression (ELEMENT_OPTIONS (= tokenIndex 683))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 685))) {$p = $expression.p})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 415))) ('/' (ELEMENT_OPTIONS (= tokenIndex 417))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 424) (= p 15)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 439))) ('-' (ELEMENT_OPTIONS (= tokenIndex 441))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 448) (= p 14)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 504))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 506))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 508))) ('>' (ELEMENT_OPTIONS (= tokenIndex 510))) (MODULO (ELEMENT_OPTIONS (= tokenIndex 512))) (DIFERENTEDE (ELEMENT_OPTIONS (= tokenIndex 514))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 521) (= p 12)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (IGUALIGUA (ELEMENT_OPTIONS (= tokenIndex 535)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 541) (= p 11)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (SET (OR (ELEMENT_OPTIONS (= tokenIndex 556))) (AND (ELEMENT_OPTIONS (= tokenIndex 558))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 565) (= p 10)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 591))) (= op (P_ABS (ELEMENT_OPTIONS (= tokenIndex 595)))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 597))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 599))) {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 611))) (= op (P_SQRT (ELEMENT_OPTIONS (= tokenIndex 615)))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 617))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 619))) {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 631))) (= op (P_TOSTRING (ELEMENT_OPTIONS (= tokenIndex 635)))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 637))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 639))) {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 651))) (= op (P_CLONE (ELEMENT_OPTIONS (= tokenIndex 655)))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 657))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 659))) {$p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())}))))))
2022-03-17 22:57:22:837 left-recursion LogManager.java:25 listValues returns [*arrayList.List l]
    :   ( {} expression<tokenIndex=710> { 
                    $l = arrayList.New()
                    $l.Add($expression.p)
                } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=702> expression<tokenIndex=704> { 
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                              }
        )*
    ;
2022-03-17 22:57:22:838 grammar LogManager.java:25 added: (RULE listValues (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 710))) { 
                    $l = arrayList.New()
                    $l.Add($expression.p)
                })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 702))) (expression (ELEMENT_OPTIONS (= tokenIndex 704))) { 
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                              }))))))
2022-03-17 22:57:22:865 left-recursion LogManager.java:25 listArray returns [interfaces.Expresion p]
    :   ( {} ID<tokenIndex=813> { $p = expresion.NewCallVariable($ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=803> expression<tokenIndex=805> CORDER<tokenIndex=807> { $p = expresion.NewArrayAccess($list.p, $expression.p) }
        )*
    ;
2022-03-17 22:57:22:865 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 813))) { $p = expresion.NewCallVariable($ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 803))) (expression (ELEMENT_OPTIONS (= tokenIndex 805))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 807))) { $p = expresion.NewArrayAccess($list.p, $expression.p) }))))))
2022-03-17 22:57:22:874 grammar LogManager.java:25 import PRINTLN=1
2022-03-17 22:57:22:874 grammar LogManager.java:25 import PRINT=2
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_NUMBER=3
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_STRING=4
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_IF=5
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_ELSE=6
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_WHILE=7
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_POW=8
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_POWF=9
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_I64=10
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_F64=11
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_LET=12
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_MUT=13
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_AS=14
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_TRUE=15
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_FALSE=16
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_MATCH=17
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_LOOP=18
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_ABS=19
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_SQRT=20
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_TOSTRING=21
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_CLONE=22
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_FOR=23
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_IN=24
2022-03-17 22:57:22:874 grammar LogManager.java:25 import P_BREAK=25
2022-03-17 22:57:22:874 grammar LogManager.java:25 import NUMBER=26
2022-03-17 22:57:22:874 grammar LogManager.java:25 import DECIMAL=27
2022-03-17 22:57:22:874 grammar LogManager.java:25 import STRING=28
2022-03-17 22:57:22:874 grammar LogManager.java:25 import ID=29
2022-03-17 22:57:22:874 grammar LogManager.java:25 import PUNTO=30
2022-03-17 22:57:22:874 grammar LogManager.java:25 import PTCOMA=31
2022-03-17 22:57:22:874 grammar LogManager.java:25 import COMA=32
2022-03-17 22:57:22:874 grammar LogManager.java:25 import DOSPUNTOS=33
2022-03-17 22:57:22:874 grammar LogManager.java:25 import DIFERENTE=34
2022-03-17 22:57:22:874 grammar LogManager.java:25 import DIFERENTEDE=35
2022-03-17 22:57:22:874 grammar LogManager.java:25 import IGUAL=36
2022-03-17 22:57:22:874 grammar LogManager.java:25 import IGUALIGUA=37
2022-03-17 22:57:22:874 grammar LogManager.java:25 import MAYORIGUAL=38
2022-03-17 22:57:22:874 grammar LogManager.java:25 import MENORIGUAL=39
2022-03-17 22:57:22:874 grammar LogManager.java:25 import MAYOR=40
2022-03-17 22:57:22:874 grammar LogManager.java:25 import MENOR=41
2022-03-17 22:57:22:874 grammar LogManager.java:25 import MUL=42
2022-03-17 22:57:22:874 grammar LogManager.java:25 import DIV=43
2022-03-17 22:57:22:874 grammar LogManager.java:25 import MODULO=44
2022-03-17 22:57:22:874 grammar LogManager.java:25 import ADD=45
2022-03-17 22:57:22:874 grammar LogManager.java:25 import SUB=46
2022-03-17 22:57:22:874 grammar LogManager.java:25 import PARIZQ=47
2022-03-17 22:57:22:874 grammar LogManager.java:25 import PARDER=48
2022-03-17 22:57:22:874 grammar LogManager.java:25 import LLAVEIZQ=49
2022-03-17 22:57:22:874 grammar LogManager.java:25 import LLAVEDER=50
2022-03-17 22:57:22:874 grammar LogManager.java:25 import CORIZQ=51
2022-03-17 22:57:22:874 grammar LogManager.java:25 import CORDER=52
2022-03-17 22:57:22:874 grammar LogManager.java:25 import OR=53
2022-03-17 22:57:22:874 grammar LogManager.java:25 import AND=54
2022-03-17 22:57:22:874 grammar LogManager.java:25 import MULTICOMENT=55
2022-03-17 22:57:22:874 grammar LogManager.java:25 import WHITESPACE=56
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'println'=1
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'print'=2
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'number'=3
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'string'=4
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'if'=5
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'else'=6
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'while'=7
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'pow'=8
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'powf'=9
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'i64'=10
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'f64'=11
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'let'=12
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'mut'=13
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'as'=14
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'true'=15
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'false'=16
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'match'=17
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'loop'=18
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'abs'=19
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'sqrt'=20
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'to_string'=21
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'clone'=22
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'for'=23
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'in'=24
2022-03-17 22:57:22:874 grammar LogManager.java:25 import 'break'=25
2022-03-17 22:57:22:874 grammar LogManager.java:25 import '.'=30
2022-03-17 22:57:22:874 grammar LogManager.java:25 import ';'=31
2022-03-17 22:57:22:874 grammar LogManager.java:25 import ','=32
2022-03-17 22:57:22:874 grammar LogManager.java:25 import ':'=33
2022-03-17 22:57:22:874 grammar LogManager.java:25 import '!'=34
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '!='=35
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '='=36
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '=='=37
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '>='=38
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '<='=39
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '>'=40
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '<'=41
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '*'=42
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '/'=43
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '%'=44
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '+'=45
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '-'=46
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '('=47
2022-03-17 22:57:22:875 grammar LogManager.java:25 import ')'=48
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '{'=49
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '}'=50
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '['=51
2022-03-17 22:57:22:875 grammar LogManager.java:25 import ']'=52
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '||'=53
2022-03-17 22:57:22:875 grammar LogManager.java:25 import '&&'=54
2022-03-17 22:57:22:875 grammar LogManager.java:25 tokens={PRINTLN=1, PRINT=2, P_NUMBER=3, P_STRING=4, P_IF=5, P_ELSE=6, P_WHILE=7, P_POW=8, P_POWF=9, P_I64=10, P_F64=11, P_LET=12, P_MUT=13, P_AS=14, P_TRUE=15, P_FALSE=16, P_MATCH=17, P_LOOP=18, P_ABS=19, P_SQRT=20, P_TOSTRING=21, P_CLONE=22, P_FOR=23, P_IN=24, P_BREAK=25, NUMBER=26, DECIMAL=27, STRING=28, ID=29, PUNTO=30, PTCOMA=31, COMA=32, DOSPUNTOS=33, DIFERENTE=34, DIFERENTEDE=35, IGUAL=36, IGUALIGUA=37, MAYORIGUAL=38, MENORIGUAL=39, MAYOR=40, MENOR=41, MUL=42, DIV=43, MODULO=44, ADD=45, SUB=46, PARIZQ=47, PARDER=48, LLAVEIZQ=49, LLAVEDER=50, CORIZQ=51, CORDER=52, OR=53, AND=54, MULTICOMENT=55, WHITESPACE=56, 'println'=1, 'print'=2, 'number'=3, 'string'=4, 'if'=5, 'else'=6, 'while'=7, 'pow'=8, 'powf'=9, 'i64'=10, 'f64'=11, 'let'=12, 'mut'=13, 'as'=14, 'true'=15, 'false'=16, 'match'=17, 'loop'=18, 'abs'=19, 'sqrt'=20, 'to_string'=21, 'clone'=22, 'for'=23, 'in'=24, 'break'=25, '.'=30, ';'=31, ','=32, ':'=33, '!'=34, '!='=35, '='=36, '=='=37, '>='=38, '<='=39, '>'=40, '<'=41, '*'=42, '/'=43, '%'=44, '+'=45, '-'=46, '('=47, ')'=48, '{'=49, '}'=50, '['=51, ']'=52, '||'=53, '&&'=54}
2022-03-17 22:57:22:875 semantics LogManager.java:25 tokens={EOF=-1, PRINTLN=1, PRINT=2, P_NUMBER=3, P_STRING=4, P_IF=5, P_ELSE=6, P_WHILE=7, P_POW=8, P_POWF=9, P_I64=10, P_F64=11, P_LET=12, P_MUT=13, P_AS=14, P_TRUE=15, P_FALSE=16, P_MATCH=17, P_LOOP=18, P_ABS=19, P_SQRT=20, P_TOSTRING=21, P_CLONE=22, P_FOR=23, P_IN=24, P_BREAK=25, NUMBER=26, DECIMAL=27, STRING=28, ID=29, PUNTO=30, PTCOMA=31, COMA=32, DOSPUNTOS=33, DIFERENTE=34, DIFERENTEDE=35, IGUAL=36, IGUALIGUA=37, MAYORIGUAL=38, MENORIGUAL=39, MAYOR=40, MENOR=41, MUL=42, DIV=43, MODULO=44, ADD=45, SUB=46, PARIZQ=47, PARDER=48, LLAVEIZQ=49, LLAVEDER=50, CORIZQ=51, CORDER=52, OR=53, AND=54, MULTICOMENT=55, WHITESPACE=56}
2022-03-17 22:57:22:875 semantics LogManager.java:25 strings={'println'=1, 'print'=2, 'number'=3, 'string'=4, 'if'=5, 'else'=6, 'while'=7, 'pow'=8, 'powf'=9, 'i64'=10, 'f64'=11, 'let'=12, 'mut'=13, 'as'=14, 'true'=15, 'false'=16, 'match'=17, 'loop'=18, 'abs'=19, 'sqrt'=20, 'to_string'=21, 'clone'=22, 'for'=23, 'in'=24, 'break'=25, '.'=30, ';'=31, ','=32, ':'=33, '!'=34, '!='=35, '='=36, '=='=37, '>='=38, '<='=39, '>'=40, '<'=41, '*'=42, '/'=43, '%'=44, '+'=45, '-'=46, '('=47, ')'=48, '{'=49, '}'=50, '['=51, ']'=52, '||'=53, '&&'=54}
2022-03-17 22:57:22:908 LL1 LogManager.java:25 
DECISION 0 in rule instrucciones
2022-03-17 22:57:22:908 LL1 LogManager.java:25 look=[{1..2, 5, 7, 12, 18, 23, 25, 29}, {<EOF>, 50}]
2022-03-17 22:57:22:908 LL1 LogManager.java:25 LL(1)? true
2022-03-17 22:57:22:908 LL1 LogManager.java:25 
DECISION 1 in rule instruccion
2022-03-17 22:57:22:908 LL1 LogManager.java:25 look=[1, 2, 12, 12, 29, 5, 5, 5, 7, 18, 23, 25]
2022-03-17 22:57:22:908 LL1 LogManager.java:25 LL(1)? false
2022-03-17 22:57:22:908 LL1 LogManager.java:25 
DECISION 2 in rule listaelseif
2022-03-17 22:57:22:908 LL1 LogManager.java:25 look=[6, 6]
2022-03-17 22:57:22:908 LL1 LogManager.java:25 LL(1)? false
2022-03-17 22:57:22:908 LL1 LogManager.java:25 
DECISION 3 in rule tipo
2022-03-17 22:57:22:908 LL1 LogManager.java:25 look=[11, 10, 4]
2022-03-17 22:57:22:908 LL1 LogManager.java:25 LL(1)? true
2022-03-17 22:57:22:908 LL1 LogManager.java:25 
DECISION 4 in rule mut
2022-03-17 22:57:22:908 LL1 LogManager.java:25 look=[13, {29, 51}]
2022-03-17 22:57:22:908 LL1 LogManager.java:25 LL(1)? true
2022-03-17 22:57:22:908 LL1 LogManager.java:25 
DECISION 5 in rule array_st
2022-03-17 22:57:22:908 LL1 LogManager.java:25 look=[51, 29]
2022-03-17 22:57:22:908 LL1 LogManager.java:25 LL(1)? true
2022-03-17 22:57:22:908 LL1 LogManager.java:25 
DECISION 6 in rule expr_arit
2022-03-17 22:57:22:909 LL1 LogManager.java:25 look=[{10..11}, 34, 51, {15..16, 26..29, 46}, 47]
2022-03-17 22:57:22:909 LL1 LogManager.java:25 LL(1)? true
2022-03-17 22:57:22:909 LL1 LogManager.java:25 
DECISION 7 in rule expr_arit
2022-03-17 22:57:22:909 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null, null]
2022-03-17 22:57:22:909 LL1 LogManager.java:25 LL(1)? false
2022-03-17 22:57:22:909 LL1 LogManager.java:25 
DECISION 8 in rule expr_arit
2022-03-17 22:57:22:909 LL1 LogManager.java:25 look=[null, null]
2022-03-17 22:57:22:909 LL1 LogManager.java:25 LL(1)? false
2022-03-17 22:57:22:909 LL1 LogManager.java:25 
DECISION 9 in rule listValues
2022-03-17 22:57:22:909 LL1 LogManager.java:25 look=[null, 52]
2022-03-17 22:57:22:909 LL1 LogManager.java:25 LL(1)? false
2022-03-17 22:57:22:909 LL1 LogManager.java:25 
DECISION 10 in rule primitivo
2022-03-17 22:57:22:909 LL1 LogManager.java:25 look=[26, 46, 46, 28, 27, 27, 26, 29, 15, 16]
2022-03-17 22:57:22:909 LL1 LogManager.java:25 LL(1)? false
2022-03-17 22:57:22:909 LL1 LogManager.java:25 
DECISION 11 in rule listArray
2022-03-17 22:57:22:909 LL1 LogManager.java:25 look=[null, null]
2022-03-17 22:57:22:909 LL1 LogManager.java:25 LL(1)? false
2022-03-17 22:57:22:923 action-translator LogManager.java:25 translate 
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"


2022-03-17 22:57:22:953 action-translator LogManager.java:25 translate $lista = $instrucciones.l
2022-03-17 22:57:22:953 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,18:19]
2022-03-17 22:57:22:955 action-translator LogManager.java:25 qattr [@-1,10:22='instrucciones',<0>,18:28].[@-1,24:24='l',<0>,18:42]
2022-03-17 22:57:22:955 action-translator LogManager.java:25 translate 
    $l =  arrayList.New()
  
2022-03-17 22:57:22:955 action-translator LogManager.java:25 attr [@-1,7:7='l',<0>,23:5]
2022-03-17 22:57:22:955 action-translator LogManager.java:25 translate 
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    
2022-03-17 22:57:22:955 action-translator LogManager.java:25 attr [@-1,110:110='l',<0>,28:13]
2022-03-17 22:57:22:958 action-translator LogManager.java:25 translate $instr = instruction.NewImprimir($expression.p,false)
2022-03-17 22:57:22:958 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,35:52]
2022-03-17 22:57:22:958 action-translator LogManager.java:25 qattr [@-1,34:43='expression',<0>,35:85].[@-1,45:45='p',<0>,35:96]
2022-03-17 22:57:22:959 action-translator LogManager.java:25 translate $instr = instruction.NewImprimir($expression.p,true)
2022-03-17 22:57:22:959 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,36:50]
2022-03-17 22:57:22:959 action-translator LogManager.java:25 qattr [@-1,34:43='expression',<0>,36:83].[@-1,45:45='p',<0>,36:94]
2022-03-17 22:57:22:959 action-translator LogManager.java:25 translate $instr = instruction.NewDeclaration($id.text,$isTipo.p,$expression.p, $isArray.arr,$muteable.arr,$expression.start.GetLine(),$expression.start.GetColumn())	
2022-03-17 22:57:22:959 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,37:89]
2022-03-17 22:57:22:959 action-translator LogManager.java:25 qattr [@-1,37:38='id',<0>,37:125].[@-1,40:43='text',<0>,37:128]
2022-03-17 22:57:22:959 action-translator LogManager.java:25 qattr [@-1,46:51='isTipo',<0>,37:134].[@-1,53:53='p',<0>,37:141]
2022-03-17 22:57:22:959 action-translator LogManager.java:25 qattr [@-1,56:65='expression',<0>,37:144].[@-1,67:67='p',<0>,37:155]
2022-03-17 22:57:22:959 action-translator LogManager.java:25 qattr [@-1,71:77='isArray',<0>,37:159].[@-1,79:81='arr',<0>,37:167]
2022-03-17 22:57:22:959 action-translator LogManager.java:25 qattr [@-1,84:91='muteable',<0>,37:172].[@-1,93:95='arr',<0>,37:181]
2022-03-17 22:57:22:959 action-translator LogManager.java:25 qattr [@-1,98:107='expression',<0>,37:186].[@-1,109:113='start',<0>,37:197]
2022-03-17 22:57:22:959 action-translator LogManager.java:25 qattr [@-1,126:135='expression',<0>,37:214].[@-1,137:141='start',<0>,37:225]
2022-03-17 22:57:22:959 action-translator LogManager.java:25 translate $instr = instruction.NewDeclaration($id.text,interfaces.NULL,$expression.p, $isArray.arr,$muteable.arr,$expression.start.GetLine(),$expression.start.GetColumn())	
2022-03-17 22:57:22:959 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,38:67]
2022-03-17 22:57:22:959 action-translator LogManager.java:25 qattr [@-1,37:38='id',<0>,38:103].[@-1,40:43='text',<0>,38:106]
2022-03-17 22:57:22:959 action-translator LogManager.java:25 qattr [@-1,62:71='expression',<0>,38:128].[@-1,73:73='p',<0>,38:139]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 qattr [@-1,77:83='isArray',<0>,38:143].[@-1,85:87='arr',<0>,38:151]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 qattr [@-1,90:97='muteable',<0>,38:156].[@-1,99:101='arr',<0>,38:165]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 qattr [@-1,104:113='expression',<0>,38:170].[@-1,115:119='start',<0>,38:181]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 qattr [@-1,132:141='expression',<0>,38:198].[@-1,143:147='start',<0>,38:209]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 translate $instr = instruction.NewAssignment($id.text,$expression.p)
2022-03-17 22:57:22:960 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,39:29]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 qattr [@-1,36:37='id',<0>,39:64].[@-1,39:42='text',<0>,39:67]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 qattr [@-1,45:54='expression',<0>,39:73].[@-1,56:56='p',<0>,39:84]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p, $instrucciones.l,nil,nil)
2022-03-17 22:57:22:960 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,40:54]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,40:81].[@-1,39:39='p',<0>,40:92]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 qattr [@-1,43:55='instrucciones',<0>,40:96].[@-1,57:57='l',<0>,40:110]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p, $i1.l,nil,$i2.l)
2022-03-17 22:57:22:960 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,41:98]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,41:125].[@-1,39:39='p',<0>,41:136]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 qattr [@-1,43:44='i1',<0>,41:140].[@-1,46:46='l',<0>,41:143]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 qattr [@-1,53:54='i2',<0>,41:150].[@-1,56:56='l',<0>,41:153]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p, $i1.l,$d2.lista,$i2.l)
2022-03-17 22:57:22:960 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,42:114]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,42:141].[@-1,39:39='p',<0>,42:152]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 qattr [@-1,43:44='i1',<0>,42:156].[@-1,46:46='l',<0>,42:159]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 qattr [@-1,49:50='d2',<0>,42:162].[@-1,52:56='lista',<0>,42:165]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 qattr [@-1,59:60='i2',<0>,42:172].[@-1,62:62='l',<0>,42:175]
2022-03-17 22:57:22:960 action-translator LogManager.java:25 translate $instr = instruction.NewWhile($expression.p, $instrucciones.l)
2022-03-17 22:57:22:961 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,43:57]
2022-03-17 22:57:22:961 action-translator LogManager.java:25 qattr [@-1,31:40='expression',<0>,43:87].[@-1,42:42='p',<0>,43:98]
2022-03-17 22:57:22:961 action-translator LogManager.java:25 qattr [@-1,46:58='instrucciones',<0>,43:102].[@-1,60:60='l',<0>,43:116]
2022-03-17 22:57:22:961 action-translator LogManager.java:25 translate $instr = instruction.NewLoop($instrucciones.l)
2022-03-17 22:57:22:961 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,44:45]
2022-03-17 22:57:22:961 action-translator LogManager.java:25 qattr [@-1,30:42='instrucciones',<0>,44:74].[@-1,44:44='l',<0>,44:88]
2022-03-17 22:57:22:961 action-translator LogManager.java:25 translate $instr = instruction.NewForin($id.text,$f2.p,$instrucciones.l)
2022-03-17 22:57:22:961 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,45:70]
2022-03-17 22:57:22:961 action-translator LogManager.java:25 qattr [@-1,31:32='id',<0>,45:100].[@-1,34:37='text',<0>,45:103]
2022-03-17 22:57:22:961 action-translator LogManager.java:25 qattr [@-1,40:41='f2',<0>,45:109].[@-1,43:43='p',<0>,45:112]
2022-03-17 22:57:22:961 action-translator LogManager.java:25 qattr [@-1,46:58='instrucciones',<0>,45:115].[@-1,60:60='l',<0>,45:129]
2022-03-17 22:57:22:961 action-translator LogManager.java:25 translate $instr = instruction.NewBreak(interfaces.BREAK,$P_BREAK.line,$P_BREAK.pos)
2022-03-17 22:57:22:961 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,46:18]
2022-03-17 22:57:22:961 action-translator LogManager.java:25 qattr [@-1,48:54='P_BREAK',<0>,46:65].[@-1,56:59='line',<0>,46:73]
2022-03-17 22:57:22:961 action-translator LogManager.java:25 qattr [@-1,62:68='P_BREAK',<0>,46:79].[@-1,70:72='pos',<0>,46:87]
2022-03-17 22:57:22:962 action-translator LogManager.java:25 translate  $lista = arrayList.New()
2022-03-17 22:57:22:962 action-translator LogManager.java:25 attr [@-1,2:6='lista',<0>,49:7]
2022-03-17 22:57:22:962 action-translator LogManager.java:25 translate 
      listInt := localctx.(*ListaelseifContext).GetList()
                                                                            for _, e := range listInt {
                                                                                $lista.Add(e.GetInstr())
                                                                            }
    
2022-03-17 22:57:22:962 action-translator LogManager.java:25 attr [@-1,247:251='lista',<0>,53:81]
2022-03-17 22:57:22:962 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p, $instrucciones.l,nil,nil)
2022-03-17 22:57:22:962 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,58:63]
2022-03-17 22:57:22:962 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,58:90].[@-1,39:39='p',<0>,58:101]
2022-03-17 22:57:22:962 action-translator LogManager.java:25 qattr [@-1,43:55='instrucciones',<0>,58:105].[@-1,57:57='l',<0>,58:119]
2022-03-17 22:57:22:964 action-translator LogManager.java:25 translate $p=interfaces.FLOAT
2022-03-17 22:57:22:964 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,62:7]
2022-03-17 22:57:22:964 action-translator LogManager.java:25 translate $p=interfaces.INTEGER
2022-03-17 22:57:22:964 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,63:7]
2022-03-17 22:57:22:964 action-translator LogManager.java:25 translate $p=interfaces.STRING
2022-03-17 22:57:22:964 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,64:10]
2022-03-17 22:57:22:964 action-translator LogManager.java:25 translate  $arr = true 
2022-03-17 22:57:22:964 action-translator LogManager.java:25 attr [@-1,2:4='arr',<0>,67:9]
2022-03-17 22:57:22:964 action-translator LogManager.java:25 translate  $arr = true 
2022-03-17 22:57:22:964 action-translator LogManager.java:25 attr [@-1,2:4='arr',<0>,72:21]
2022-03-17 22:57:22:964 action-translator LogManager.java:25 translate $p = $expr_arit.p
2022-03-17 22:57:22:964 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,77:20]
2022-03-17 22:57:22:964 action-translator LogManager.java:25 qattr [@-1,6:14='expr_arit',<0>,77:25].[@-1,16:16='p',<0>,77:35]
2022-03-17 22:57:22:965 action-translator LogManager.java:25 translate 
2022-03-17 22:57:22:965 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-17 22:57:22:966 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:304]
2022-03-17 22:57:22:966 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,2:332].[@-1,34:34='p',<0>,2:337]
2022-03-17 22:57:22:966 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,2:340].[@-1,40:43='text',<0>,2:343]
2022-03-17 22:57:22:966 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,2:349].[@-1,51:51='p',<0>,2:354]
2022-03-17 22:57:22:966 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,2:363].[@-1,65:69='start',<0>,2:368]
2022-03-17 22:57:22:966 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,2:385].[@-1,87:91='start',<0>,2:390]
2022-03-17 22:57:22:966 action-translator LogManager.java:25 translate $p = expresion.NewOperacion(nil,$op.text,$opDe.p,false,$opDe.start.GetLine(),$opDe.start.GetColumn())
2022-03-17 22:57:22:966 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,3:79]
2022-03-17 22:57:22:966 action-translator LogManager.java:25 qattr [@-1,33:34='op',<0>,3:111].[@-1,36:39='text',<0>,3:114]
2022-03-17 22:57:22:966 action-translator LogManager.java:25 qattr [@-1,42:45='opDe',<0>,3:120].[@-1,47:47='p',<0>,3:125]
2022-03-17 22:57:22:966 action-translator LogManager.java:25 qattr [@-1,56:59='opDe',<0>,3:134].[@-1,61:65='start',<0>,3:139]
2022-03-17 22:57:22:966 action-translator LogManager.java:25 qattr [@-1,78:81='opDe',<0>,3:156].[@-1,83:87='start',<0>,3:161]
2022-03-17 22:57:22:966 action-translator LogManager.java:25 translate  $p = expresion.NewArray($listValues.l) 
2022-03-17 22:57:22:966 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,4:85]
2022-03-17 22:57:22:966 action-translator LogManager.java:25 qattr [@-1,26:35='listValues',<0>,4:109].[@-1,37:37='l',<0>,4:120]
2022-03-17 22:57:22:966 action-translator LogManager.java:25 translate $p = $primitivo.p
2022-03-17 22:57:22:966 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,5:37]
2022-03-17 22:57:22:967 action-translator LogManager.java:25 qattr [@-1,6:14='primitivo',<0>,5:42].[@-1,16:16='p',<0>,5:52]
2022-03-17 22:57:22:967 action-translator LogManager.java:25 translate $p = $expression.p
2022-03-17 22:57:22:967 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,6:84]
2022-03-17 22:57:22:967 action-translator LogManager.java:25 qattr [@-1,6:15='expression',<0>,6:89].[@-1,17:17='p',<0>,6:100]
2022-03-17 22:57:22:967 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2022-03-17 22:57:22:967 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-17 22:57:22:967 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,9:144]
2022-03-17 22:57:22:967 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,9:172].[@-1,34:34='p',<0>,9:177]
2022-03-17 22:57:22:967 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,9:180].[@-1,40:43='text',<0>,9:183]
2022-03-17 22:57:22:967 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,9:189].[@-1,51:51='p',<0>,9:194]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,9:203].[@-1,65:69='start',<0>,9:208]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,9:225].[@-1,87:91='start',<0>,9:230]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2022-03-17 22:57:22:969 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-17 22:57:22:969 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,10:154]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,10:182].[@-1,34:34='p',<0>,10:187]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,10:190].[@-1,40:43='text',<0>,10:193]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,10:199].[@-1,51:51='p',<0>,10:204]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,10:213].[@-1,65:69='start',<0>,10:218]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,10:235].[@-1,87:91='start',<0>,10:240]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-03-17 22:57:22:969 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-17 22:57:22:969 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,11:247]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,11:275].[@-1,34:34='p',<0>,11:280]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,11:283].[@-1,40:43='text',<0>,11:286]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,11:292].[@-1,51:51='p',<0>,11:297]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,11:306].[@-1,65:69='start',<0>,11:311]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,11:328].[@-1,87:91='start',<0>,11:333]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-03-17 22:57:22:969 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-17 22:57:22:969 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,12:139]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,12:167].[@-1,34:34='p',<0>,12:172]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,12:175].[@-1,40:43='text',<0>,12:178]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,12:184].[@-1,51:51='p',<0>,12:189]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,12:198].[@-1,65:69='start',<0>,12:203]
2022-03-17 22:57:22:969 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,12:220].[@-1,87:91='start',<0>,12:225]
2022-03-17 22:57:22:970 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2022-03-17 22:57:22:970 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-17 22:57:22:970 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,13:152]
2022-03-17 22:57:22:970 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,13:180].[@-1,34:34='p',<0>,13:185]
2022-03-17 22:57:22:970 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,13:188].[@-1,40:43='text',<0>,13:191]
2022-03-17 22:57:22:970 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,13:197].[@-1,51:51='p',<0>,13:202]
2022-03-17 22:57:22:970 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,13:211].[@-1,65:69='start',<0>,13:216]
2022-03-17 22:57:22:970 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,13:233].[@-1,87:91='start',<0>,13:238]
2022-03-17 22:57:22:970 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-03-17 22:57:22:971 action-translator LogManager.java:25 translate $p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-17 22:57:22:971 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,14:162]
2022-03-17 22:57:22:971 action-translator LogManager.java:25 qattr [@-1,27:30='opIz',<0>,14:188].[@-1,32:32='p',<0>,14:193]
2022-03-17 22:57:22:971 action-translator LogManager.java:25 qattr [@-1,35:36='op',<0>,14:196].[@-1,38:41='text',<0>,14:199]
2022-03-17 22:57:22:971 action-translator LogManager.java:25 qattr [@-1,44:47='opIz',<0>,14:205].[@-1,49:53='start',<0>,14:210]
2022-03-17 22:57:22:971 action-translator LogManager.java:25 qattr [@-1,66:69='opIz',<0>,14:227].[@-1,71:75='start',<0>,14:232]
2022-03-17 22:57:22:971 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-03-17 22:57:22:971 action-translator LogManager.java:25 translate $p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-17 22:57:22:971 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,15:163]
2022-03-17 22:57:22:971 action-translator LogManager.java:25 qattr [@-1,27:30='opIz',<0>,15:189].[@-1,32:32='p',<0>,15:194]
2022-03-17 22:57:22:971 action-translator LogManager.java:25 qattr [@-1,35:36='op',<0>,15:197].[@-1,38:41='text',<0>,15:200]
2022-03-17 22:57:22:971 action-translator LogManager.java:25 qattr [@-1,44:47='opIz',<0>,15:206].[@-1,49:53='start',<0>,15:211]
2022-03-17 22:57:22:971 action-translator LogManager.java:25 qattr [@-1,66:69='opIz',<0>,15:228].[@-1,71:75='start',<0>,15:233]
2022-03-17 22:57:22:971 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-17 22:57:22:971 action-translator LogManager.java:25 translate $p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-17 22:57:22:971 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,16:167]
2022-03-17 22:57:22:971 action-translator LogManager.java:25 qattr [@-1,27:30='opIz',<0>,16:193].[@-1,32:32='p',<0>,16:198]
2022-03-17 22:57:22:971 action-translator LogManager.java:25 qattr [@-1,35:36='op',<0>,16:201].[@-1,38:41='text',<0>,16:204]
2022-03-17 22:57:22:971 action-translator LogManager.java:25 qattr [@-1,44:47='opIz',<0>,16:210].[@-1,49:53='start',<0>,16:215]
2022-03-17 22:57:22:972 action-translator LogManager.java:25 qattr [@-1,66:69='opIz',<0>,16:232].[@-1,71:75='start',<0>,16:237]
2022-03-17 22:57:22:972 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-17 22:57:22:972 action-translator LogManager.java:25 translate $p = expresion.NewNativas($opIz.p,$op.text,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-17 22:57:22:972 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,17:164]
2022-03-17 22:57:22:972 action-translator LogManager.java:25 qattr [@-1,27:30='opIz',<0>,17:190].[@-1,32:32='p',<0>,17:195]
2022-03-17 22:57:22:972 action-translator LogManager.java:25 qattr [@-1,35:36='op',<0>,17:198].[@-1,38:41='text',<0>,17:201]
2022-03-17 22:57:22:972 action-translator LogManager.java:25 qattr [@-1,44:47='opIz',<0>,17:207].[@-1,49:53='start',<0>,17:212]
2022-03-17 22:57:22:972 action-translator LogManager.java:25 qattr [@-1,66:69='opIz',<0>,17:229].[@-1,71:75='start',<0>,17:234]
2022-03-17 22:57:22:973 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2022-03-17 22:57:22:973 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2022-03-17 22:57:22:973 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-03-17 22:57:22:973 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-03-17 22:57:22:973 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2022-03-17 22:57:22:973 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-03-17 22:57:22:973 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-03-17 22:57:22:973 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-17 22:57:22:973 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-17 22:57:22:973 action-translator LogManager.java:25 translate 
2022-03-17 22:57:22:973 action-translator LogManager.java:25 translate  
                    $l = arrayList.New()
                    $l.Add($expression.p)
                
2022-03-17 22:57:22:973 action-translator LogManager.java:25 attr [@-1,24:24='l',<0>,3:21]
2022-03-17 22:57:22:973 action-translator LogManager.java:25 attr [@-1,66:66='l',<0>,4:21]
2022-03-17 22:57:22:973 action-translator LogManager.java:25 qattr [@-1,73:82='expression',<0>,4:28].[@-1,84:84='p',<0>,4:39]
2022-03-17 22:57:22:973 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-17 22:57:22:973 action-translator LogManager.java:25 translate  
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                              
2022-03-17 22:57:22:973 action-translator LogManager.java:25 qattr [@-1,54:57='list',<0>,9:51].[@-1,59:59='l',<0>,9:56]
2022-03-17 22:57:22:974 action-translator LogManager.java:25 qattr [@-1,66:75='expression',<0>,9:63].[@-1,77:77='p',<0>,9:74]
2022-03-17 22:57:22:974 action-translator LogManager.java:25 attr [@-1,132:132='l',<0>,10:51]
2022-03-17 22:57:22:974 action-translator LogManager.java:25 qattr [@-1,137:140='list',<0>,10:56].[@-1,142:142='l',<0>,10:61]
2022-03-17 22:57:22:974 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-17 22:57:22:974 action-translator LogManager.java:25 translate 
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       
2022-03-17 22:57:22:974 action-translator LogManager.java:25 qattr [@-1,40:45='NUMBER',<0>,111:38].[@-1,47:50='text',<0>,111:45]
2022-03-17 22:57:22:974 action-translator LogManager.java:25 attr [@-1,173:173='p',<0>,116:13]
2022-03-17 22:57:22:975 action-translator LogManager.java:25 translate 
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (-num,interfaces.INTEGER)
       
2022-03-17 22:57:22:975 action-translator LogManager.java:25 qattr [@-1,40:45='NUMBER',<0>,119:38].[@-1,47:50='text',<0>,119:45]
2022-03-17 22:57:22:975 action-translator LogManager.java:25 attr [@-1,173:173='p',<0>,124:13]
2022-03-17 22:57:22:975 action-translator LogManager.java:25 translate 
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (-a,interfaces.FLOAT)
       
2022-03-17 22:57:22:975 action-translator LogManager.java:25 qattr [@-1,46:52='DECIMAL',<0>,127:44].[@-1,54:57='text',<0>,127:52]
2022-03-17 22:57:22:975 action-translator LogManager.java:25 attr [@-1,202:202='p',<0>,132:13]
2022-03-17 22:57:22:975 action-translator LogManager.java:25 translate  
              
      str:= $STRING.text[1:len($STRING.text)-1]
     
      $p = expresion.NewPrimitivo(str,interfaces.STRING)
2022-03-17 22:57:22:975 action-translator LogManager.java:25 qattr [@-1,32:37='STRING',<0>,136:13].[@-1,39:42='text',<0>,136:20]
2022-03-17 22:57:22:975 action-translator LogManager.java:25 qattr [@-1,51:56='STRING',<0>,136:32].[@-1,58:61='text',<0>,136:39]
2022-03-17 22:57:22:975 action-translator LogManager.java:25 attr [@-1,82:82='p',<0>,138:7]
2022-03-17 22:57:22:975 action-translator LogManager.java:25 translate 
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       
2022-03-17 22:57:22:975 action-translator LogManager.java:25 qattr [@-1,46:52='DECIMAL',<0>,140:44].[@-1,54:57='text',<0>,140:52]
2022-03-17 22:57:22:975 action-translator LogManager.java:25 attr [@-1,202:202='p',<0>,145:13]
2022-03-17 22:57:22:975 action-translator LogManager.java:25 translate 
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
            a := int(num)
            $p = expresion.NewPrimitivo (a,interfaces.INTEGER)
       
2022-03-17 22:57:22:975 action-translator LogManager.java:25 qattr [@-1,46:52='DECIMAL',<0>,149:44].[@-1,54:57='text',<0>,149:52]
2022-03-17 22:57:22:976 action-translator LogManager.java:25 attr [@-1,192:192='p',<0>,154:13]
2022-03-17 22:57:22:977 action-translator LogManager.java:25 translate 
           num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            a := float64(num)  
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       
2022-03-17 22:57:22:977 action-translator LogManager.java:25 qattr [@-1,38:43='NUMBER',<0>,157:36].[@-1,45:48='text',<0>,157:43]
2022-03-17 22:57:22:977 action-translator LogManager.java:25 attr [@-1,186:186='p',<0>,162:13]
2022-03-17 22:57:22:977 action-translator LogManager.java:25 translate  $p = $list.p
2022-03-17 22:57:22:977 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,164:22]
2022-03-17 22:57:22:977 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,164:27].[@-1,12:12='p',<0>,164:32]
2022-03-17 22:57:22:977 action-translator LogManager.java:25 translate       
      $p = expresion.NewPrimitivo("true",interfaces.TRUE)
2022-03-17 22:57:22:977 action-translator LogManager.java:25 attr [@-1,15:15='p',<0>,166:7]
2022-03-17 22:57:22:977 action-translator LogManager.java:25 translate       
      $p = expresion.NewPrimitivo("false",interfaces.FALSE)
2022-03-17 22:57:22:977 action-translator LogManager.java:25 attr [@-1,15:15='p',<0>,168:7]
2022-03-17 22:57:22:977 action-translator LogManager.java:25 translate 
2022-03-17 22:57:22:977 action-translator LogManager.java:25 translate  $p = expresion.NewCallVariable($ID.text)
2022-03-17 22:57:22:977 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2022-03-17 22:57:22:977 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,2:65].[@-1,36:39='text',<0>,2:68]
2022-03-17 22:57:22:977 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-17 22:57:22:977 action-translator LogManager.java:25 translate  $p = expresion.NewArrayAccess($list.p, $expression.p) 
2022-03-17 22:57:22:977 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:133]
2022-03-17 22:57:22:977 action-translator LogManager.java:25 qattr [@-1,32:35='list',<0>,5:163].[@-1,37:37='p',<0>,5:168]
2022-03-17 22:57:22:977 action-translator LogManager.java:25 qattr [@-1,41:50='expression',<0>,5:172].[@-1,52:52='p',<0>,5:183]
2022-03-17 22:57:22:977 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-17 22:57:23:085 action-translator LogManager.java:25 translate 
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"


2022-03-17 22:57:23:085 action-translator LogManager.java:25 translate 
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"


2022-03-17 22:57:23:114 action-translator LogManager.java:25 translate 
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"


2022-03-17 22:57:23:114 action-translator LogManager.java:25 translate 
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"


