2022-03-16 22:14:39:694 grammar LogManager.java:25 before: (PARSER_GRAMMAR Chems (OPTIONS (= tokenVocab ChemsLexer)) (@ header {
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"

}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT PRINTLN DIFERENTE PARIZQ expression PARDER ';' {$instr = instruction.NewImprimir($expression.p)}) (ALT P_LET (= muteable mut) (= isArray array_st) (= id ID) DOSPUNTOS (= isTipo tipo) IGUAL expression ';' {$instr = instruction.NewDeclaration($id.text,$isTipo.p,$expression.p, $isArray.arr,$muteable.arr)	}) (ALT P_LET (= muteable mut) (= isArray array_st) (= id ID) IGUAL expression ';' {$instr = instruction.NewDeclaration($id.text,interfaces.NULL,$expression.p, $isArray.arr,$muteable.arr)	}) (ALT (= id ID) '=' expression ';' {$instr = instruction.NewAssignment($id.text,$expression.p)}) (ALT P_IF expression LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewIf($expression.p, $instrucciones.l,false,nil)}) (ALT P_IF expression LLAVEIZQ (= i1 instrucciones) LLAVEDER P_ELSE LLAVEIZQ (= i2 instrucciones) LLAVEDER {$instr = instruction.NewIf($expression.p, $i1.l,true,$i2.l)}) (ALT P_WHILE expression LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewWhile($expression.p, $instrucciones.l)}) (ALT P_LOOP LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewLoop($instrucciones.l)}) (ALT P_FOR (= id ID) P_IN (= f2 expression) LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewForin($id.text,$f2.p,$instrucciones.l)}))) (RULE tipo (returns interfaces.TipoExpresion p) (BLOCK (ALT P_F64 {$p=interfaces.FLOAT}) (ALT P_I64 {$p=interfaces.INTEGER}) (ALT P_STRING {$p=interfaces.STRING}))) (RULE mut (returns bool arr) (BLOCK (ALT P_MUT { $arr = true }) (ALT EPSILON))) (RULE array_st (returns bool arr) (BLOCK (ALT CORIZQ CORDER { $arr = true }) (ALT EPSILON))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= opIz expr_arit) (= op (BLOCK (ALT '*') (ALT '/'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '+') (ALT '-'))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= reservada (BLOCK (ALT P_F64) (ALT P_I64))) DOSPUNTOS DOSPUNTOS (= op (BLOCK (ALT P_POW) (ALT P_POWF))) PARIZQ (= opIz expr_arit) COMA (= opDe expr_arit) PARDER {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '<') (ALT '<=') (ALT '>=') (ALT '>') (ALT MODULO) (ALT DIFERENTEDE))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op IGUALIGUA) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT OR) (ALT AND))) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= op DIFERENTE) (= opDe expr_arit) {$p = expresion.NewOperacion(nil,$op.text,$opDe.p,false,$opDe.start.GetLine(),$opDe.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_ABS) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text)}) (ALT (= opIz expr_arit) PUNTO (= op P_SQRT) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text)}) (ALT (= opIz expr_arit) PUNTO (= op P_TOSTRING) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text)}) (ALT (= opIz expr_arit) PUNTO (= op P_CLONE) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text)}) (ALT CORIZQ listValues CORDER { $p = expresion.NewArray($listValues.l) }) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}))) (RULE listValues (returns *arrayList.List l) (BLOCK (ALT (= list listValues) ',' expression { 
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                    }) (ALT expression { 
                    $l = arrayList.New()
                    $l.Add($expression.p)
                }))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       }) (ALT SUB NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (-num,interfaces.INTEGER)
       }) (ALT SUB DECIMAL {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (-a,interfaces.FLOAT)
       }) (ALT STRING { 
              
      str:= $STRING.text[1:len($STRING.text)-1]
     
      $p = expresion.NewPrimitivo(str,interfaces.STRING)}) (ALT DECIMAL {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       }) (ALT DECIMAL P_AS P_I64 {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
            a := int(num)
            $p = expresion.NewPrimitivo (a,interfaces.INTEGER)
       }) (ALT NUMBER P_AS P_F64 {
           num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            a := float64(num)  
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       }) (ALT (= list listArray) { $p = $list.p}) (ALT P_TRUE {      
      $p = expresion.NewPrimitivo("true",interfaces.TRUE)}) (ALT P_FALSE {      
      $p = expresion.NewPrimitivo("false",interfaces.FALSE)}))) (RULE listArray (returns interfaces.Expresion p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expresion.NewArrayAccess($list.p, $expression.p) }) (ALT ID { $p = expresion.NewCallVariable($ID.text)})))))
2022-03-16 22:14:39:713 grammar LogManager.java:25 after: (PARSER_GRAMMAR Chems (OPTIONS (= tokenVocab ChemsLexer)) (@ header {
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"

}) (RULES (RULE start (returns *arrayList.List lista) (BLOCK (ALT instrucciones {$lista = $instrucciones.l}))) (RULE instrucciones (returns *arrayList.List l) (@ init {
    $l =  arrayList.New()
  }) (BLOCK (ALT (* (BLOCK (ALT (+= e instruccion)))) {
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    }))) (RULE instruccion (returns interfaces.Instruction instr) (BLOCK (ALT PRINTLN DIFERENTE PARIZQ expression PARDER ';' {$instr = instruction.NewImprimir($expression.p)}) (ALT P_LET (= muteable mut) (= isArray array_st) (= id ID) DOSPUNTOS (= isTipo tipo) IGUAL expression ';' {$instr = instruction.NewDeclaration($id.text,$isTipo.p,$expression.p, $isArray.arr,$muteable.arr)	}) (ALT P_LET (= muteable mut) (= isArray array_st) (= id ID) IGUAL expression ';' {$instr = instruction.NewDeclaration($id.text,interfaces.NULL,$expression.p, $isArray.arr,$muteable.arr)	}) (ALT (= id ID) '=' expression ';' {$instr = instruction.NewAssignment($id.text,$expression.p)}) (ALT P_IF expression LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewIf($expression.p, $instrucciones.l,false,nil)}) (ALT P_IF expression LLAVEIZQ (= i1 instrucciones) LLAVEDER P_ELSE LLAVEIZQ (= i2 instrucciones) LLAVEDER {$instr = instruction.NewIf($expression.p, $i1.l,true,$i2.l)}) (ALT P_WHILE expression LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewWhile($expression.p, $instrucciones.l)}) (ALT P_LOOP LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewLoop($instrucciones.l)}) (ALT P_FOR (= id ID) P_IN (= f2 expression) LLAVEIZQ instrucciones LLAVEDER {$instr = instruction.NewForin($id.text,$f2.p,$instrucciones.l)}))) (RULE tipo (returns interfaces.TipoExpresion p) (BLOCK (ALT P_F64 {$p=interfaces.FLOAT}) (ALT P_I64 {$p=interfaces.INTEGER}) (ALT P_STRING {$p=interfaces.STRING}))) (RULE mut (returns bool arr) (BLOCK (ALT P_MUT { $arr = true }) (ALT EPSILON))) (RULE array_st (returns bool arr) (BLOCK (ALT CORIZQ CORDER { $arr = true }) (ALT EPSILON))) (RULE expression (returns interfaces.Expresion p) (BLOCK (ALT expr_arit {$p = $expr_arit.p}))) (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (= opIz expr_arit) (= op (SET '*' '/')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (SET '+' '-')) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= reservada (SET P_F64 P_I64)) DOSPUNTOS DOSPUNTOS (= op (SET P_POW P_POWF)) PARIZQ (= opIz expr_arit) COMA (= opDe expr_arit) PARDER {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (SET '<' '<=' '>=' '>' MODULO DIFERENTEDE)) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op IGUALIGUA) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= opIz expr_arit) (= op (SET OR AND)) (= opDe expr_arit) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= op DIFERENTE) (= opDe expr_arit) {$p = expresion.NewOperacion(nil,$op.text,$opDe.p,false,$opDe.start.GetLine(),$opDe.start.GetColumn())}) (ALT (= opIz expr_arit) PUNTO (= op P_ABS) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text)}) (ALT (= opIz expr_arit) PUNTO (= op P_SQRT) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text)}) (ALT (= opIz expr_arit) PUNTO (= op P_TOSTRING) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text)}) (ALT (= opIz expr_arit) PUNTO (= op P_CLONE) PARIZQ PARDER {$p = expresion.NewNativas($opIz.p,$op.text)}) (ALT CORIZQ listValues CORDER { $p = expresion.NewArray($listValues.l) }) (ALT primitivo {$p = $primitivo.p}) (ALT PARIZQ expression PARDER {$p = $expression.p}))) (RULE listValues (returns *arrayList.List l) (BLOCK (ALT (= list listValues) ',' expression { 
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                    }) (ALT expression { 
                    $l = arrayList.New()
                    $l.Add($expression.p)
                }))) (RULE primitivo (returns interfaces.Expresion p) (BLOCK (ALT NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       }) (ALT SUB NUMBER {
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (-num,interfaces.INTEGER)
       }) (ALT SUB DECIMAL {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (-a,interfaces.FLOAT)
       }) (ALT STRING { 
              
      str:= $STRING.text[1:len($STRING.text)-1]
     
      $p = expresion.NewPrimitivo(str,interfaces.STRING)}) (ALT DECIMAL {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       }) (ALT DECIMAL P_AS P_I64 {
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
            a := int(num)
            $p = expresion.NewPrimitivo (a,interfaces.INTEGER)
       }) (ALT NUMBER P_AS P_F64 {
           num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            a := float64(num)  
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       }) (ALT (= list listArray) { $p = $list.p}) (ALT P_TRUE {      
      $p = expresion.NewPrimitivo("true",interfaces.TRUE)}) (ALT P_FALSE {      
      $p = expresion.NewPrimitivo("false",interfaces.FALSE)}))) (RULE listArray (returns interfaces.Expresion p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expresion.NewArrayAccess($list.p, $expression.p) }) (ALT ID { $p = expresion.NewCallVariable($ID.text)})))))
2022-03-16 22:14:39:813 left-recursion LogManager.java:25 expr_arit returns [interfaces.Expresion p]
    :   ( {} reservada=(P_F64<tokenIndex=358>|P_I64<tokenIndex=360>) DOSPUNTOS<tokenIndex=363> DOSPUNTOS<tokenIndex=365> op=(P_POW<tokenIndex=370>|P_POWF<tokenIndex=372>) PARIZQ<tokenIndex=375> opIz = expr_arit<tokenIndex=381> COMA<tokenIndex=383> opDe = expr_arit<tokenIndex=389> PARDER<tokenIndex=391>{$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())} 
        | op=DIFERENTE<tokenIndex=474>  opDe = expr_arit<tokenIndex=480,p=8>  {$p = expresion.NewOperacion(nil,$op.text,$opDe.p,false,$opDe.start.GetLine(),$opDe.start.GetColumn())} 
        | CORIZQ<tokenIndex=566> listValues<tokenIndex=568> CORDER<tokenIndex=570> { $p = expresion.NewArray($listValues.l) } 
        | primitivo<tokenIndex=576> {$p = $primitivo.p} 
        | PARIZQ<tokenIndex=582> expression<tokenIndex=584> PARDER<tokenIndex=586> {$p = $expression.p} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=('*'<tokenIndex=316>|'/'<tokenIndex=318>) opDe = expr_arit<tokenIndex=325,p=15> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=('+'<tokenIndex=340>|'-'<tokenIndex=342>) opDe = expr_arit<tokenIndex=349,p=14> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=('<'<tokenIndex=405>|'<='<tokenIndex=407>|'>='<tokenIndex=409>|'>'<tokenIndex=411>|MODULO<tokenIndex=413>|DIFERENTEDE<tokenIndex=415>) opDe = expr_arit<tokenIndex=422,p=12> {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=IGUALIGUA<tokenIndex=436> opDe = expr_arit<tokenIndex=442,p=11>  {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=(OR<tokenIndex=457>|AND<tokenIndex=459>) opDe = expr_arit<tokenIndex=466,p=10>  {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> PUNTO<tokenIndex=492> op=P_ABS<tokenIndex=496> PARIZQ<tokenIndex=498> PARDER<tokenIndex=500> {$p = expresion.NewNativas($opIz.p,$op.text)}
                  | {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> PUNTO<tokenIndex=512> op=P_SQRT<tokenIndex=516> PARIZQ<tokenIndex=518> PARDER<tokenIndex=520> {$p = expresion.NewNativas($opIz.p,$op.text)}
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> PUNTO<tokenIndex=532> op=P_TOSTRING<tokenIndex=536> PARIZQ<tokenIndex=538> PARDER<tokenIndex=540> {$p = expresion.NewNativas($opIz.p,$op.text)}
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> PUNTO<tokenIndex=552> op=P_CLONE<tokenIndex=556> PARIZQ<tokenIndex=558> PARDER<tokenIndex=560> {$p = expresion.NewNativas($opIz.p,$op.text)}
        )*
    ;
2022-03-16 22:14:39:825 grammar LogManager.java:25 added: (RULE expr_arit (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (= reservada (SET (P_F64 (ELEMENT_OPTIONS (= tokenIndex 358))) (P_I64 (ELEMENT_OPTIONS (= tokenIndex 360))))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 363))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 365))) (= op (SET (P_POW (ELEMENT_OPTIONS (= tokenIndex 370))) (P_POWF (ELEMENT_OPTIONS (= tokenIndex 372))))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 375))) (= opIz (expr_arit (ELEMENT_OPTIONS (= tokenIndex 381)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 383))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 389)))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 391))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT (= op (DIFERENTE (ELEMENT_OPTIONS (= tokenIndex 474)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 480) (= p 8)))) {$p = expresion.NewOperacion(nil,$op.text,$opDe.p,false,$opDe.start.GetLine(),$opDe.start.GetColumn())}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 566))) (listValues (ELEMENT_OPTIONS (= tokenIndex 568))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 570))) { $p = expresion.NewArray($listValues.l) }) (ALT (primitivo (ELEMENT_OPTIONS (= tokenIndex 576))) {$p = $primitivo.p}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 582))) (expression (ELEMENT_OPTIONS (= tokenIndex 584))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 586))) {$p = $expression.p})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 316))) ('/' (ELEMENT_OPTIONS (= tokenIndex 318))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 325) (= p 15)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 340))) ('-' (ELEMENT_OPTIONS (= tokenIndex 342))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 349) (= p 14)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 405))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 407))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 409))) ('>' (ELEMENT_OPTIONS (= tokenIndex 411))) (MODULO (ELEMENT_OPTIONS (= tokenIndex 413))) (DIFERENTEDE (ELEMENT_OPTIONS (= tokenIndex 415))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 422) (= p 12)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (IGUALIGUA (ELEMENT_OPTIONS (= tokenIndex 436)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 442) (= p 11)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (SET (OR (ELEMENT_OPTIONS (= tokenIndex 457))) (AND (ELEMENT_OPTIONS (= tokenIndex 459))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 466) (= p 10)))) {$p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())}) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 492))) (= op (P_ABS (ELEMENT_OPTIONS (= tokenIndex 496)))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 498))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 500))) {$p = expresion.NewNativas($opIz.p,$op.text)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 512))) (= op (P_SQRT (ELEMENT_OPTIONS (= tokenIndex 516)))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 518))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 520))) {$p = expresion.NewNativas($opIz.p,$op.text)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 532))) (= op (P_TOSTRING (ELEMENT_OPTIONS (= tokenIndex 536)))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 538))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 540))) {$p = expresion.NewNativas($opIz.p,$op.text)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 552))) (= op (P_CLONE (ELEMENT_OPTIONS (= tokenIndex 556)))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 558))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 560))) {$p = expresion.NewNativas($opIz.p,$op.text)}))))))
2022-03-16 22:14:39:863 left-recursion LogManager.java:25 listValues returns [*arrayList.List l]
    :   ( {} expression<tokenIndex=611> { 
                    $l = arrayList.New()
                    $l.Add($expression.p)
                } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=603> expression<tokenIndex=605> { 
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                              }
        )*
    ;
2022-03-16 22:14:39:864 grammar LogManager.java:25 added: (RULE listValues (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 611))) { 
                    $l = arrayList.New()
                    $l.Add($expression.p)
                })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 603))) (expression (ELEMENT_OPTIONS (= tokenIndex 605))) { 
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                              }))))))
2022-03-16 22:14:39:893 left-recursion LogManager.java:25 listArray returns [interfaces.Expresion p]
    :   ( {} ID<tokenIndex=714> { $p = expresion.NewCallVariable($ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=704> expression<tokenIndex=706> CORDER<tokenIndex=708> { $p = expresion.NewArrayAccess($list.p, $expression.p) }
        )*
    ;
2022-03-16 22:14:39:894 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expresion p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 714))) { $p = expresion.NewCallVariable($ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 704))) (expression (ELEMENT_OPTIONS (= tokenIndex 706))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 708))) { $p = expresion.NewArrayAccess($list.p, $expression.p) }))))))
2022-03-16 22:14:39:903 grammar LogManager.java:25 import PRINTLN=1
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_NUMBER=2
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_STRING=3
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_IF=4
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_ELSE=5
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_WHILE=6
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_POW=7
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_POWF=8
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_I64=9
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_F64=10
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_LET=11
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_MUT=12
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_AS=13
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_TRUE=14
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_FALSE=15
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_MATCH=16
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_LOOP=17
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_ABS=18
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_SQRT=19
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_TOSTRING=20
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_CLONE=21
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_FOR=22
2022-03-16 22:14:39:903 grammar LogManager.java:25 import P_IN=23
2022-03-16 22:14:39:903 grammar LogManager.java:25 import NUMBER=24
2022-03-16 22:14:39:903 grammar LogManager.java:25 import DECIMAL=25
2022-03-16 22:14:39:903 grammar LogManager.java:25 import STRING=26
2022-03-16 22:14:39:903 grammar LogManager.java:25 import ID=27
2022-03-16 22:14:39:903 grammar LogManager.java:25 import PUNTO=28
2022-03-16 22:14:39:903 grammar LogManager.java:25 import PTCOMA=29
2022-03-16 22:14:39:903 grammar LogManager.java:25 import COMA=30
2022-03-16 22:14:39:903 grammar LogManager.java:25 import DOSPUNTOS=31
2022-03-16 22:14:39:903 grammar LogManager.java:25 import DIFERENTE=32
2022-03-16 22:14:39:903 grammar LogManager.java:25 import DIFERENTEDE=33
2022-03-16 22:14:39:903 grammar LogManager.java:25 import IGUAL=34
2022-03-16 22:14:39:903 grammar LogManager.java:25 import IGUALIGUA=35
2022-03-16 22:14:39:903 grammar LogManager.java:25 import MAYORIGUAL=36
2022-03-16 22:14:39:903 grammar LogManager.java:25 import MENORIGUAL=37
2022-03-16 22:14:39:903 grammar LogManager.java:25 import MAYOR=38
2022-03-16 22:14:39:903 grammar LogManager.java:25 import MENOR=39
2022-03-16 22:14:39:904 grammar LogManager.java:25 import MUL=40
2022-03-16 22:14:39:904 grammar LogManager.java:25 import DIV=41
2022-03-16 22:14:39:904 grammar LogManager.java:25 import MODULO=42
2022-03-16 22:14:39:904 grammar LogManager.java:25 import ADD=43
2022-03-16 22:14:39:904 grammar LogManager.java:25 import SUB=44
2022-03-16 22:14:39:904 grammar LogManager.java:25 import PARIZQ=45
2022-03-16 22:14:39:904 grammar LogManager.java:25 import PARDER=46
2022-03-16 22:14:39:904 grammar LogManager.java:25 import LLAVEIZQ=47
2022-03-16 22:14:39:904 grammar LogManager.java:25 import LLAVEDER=48
2022-03-16 22:14:39:904 grammar LogManager.java:25 import CORIZQ=49
2022-03-16 22:14:39:904 grammar LogManager.java:25 import CORDER=50
2022-03-16 22:14:39:904 grammar LogManager.java:25 import OR=51
2022-03-16 22:14:39:904 grammar LogManager.java:25 import AND=52
2022-03-16 22:14:39:904 grammar LogManager.java:25 import MULTICOMENT=53
2022-03-16 22:14:39:904 grammar LogManager.java:25 import WHITESPACE=54
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'println'=1
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'number'=2
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'string'=3
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'if'=4
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'else'=5
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'while'=6
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'pow'=7
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'powf'=8
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'i64'=9
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'f64'=10
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'let'=11
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'mut'=12
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'as'=13
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'true'=14
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'false'=15
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'match'=16
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'loop'=17
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'abs'=18
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'sqrt'=19
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'to_string'=20
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'clone'=21
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'for'=22
2022-03-16 22:14:39:904 grammar LogManager.java:25 import 'in'=23
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '.'=28
2022-03-16 22:14:39:904 grammar LogManager.java:25 import ';'=29
2022-03-16 22:14:39:904 grammar LogManager.java:25 import ','=30
2022-03-16 22:14:39:904 grammar LogManager.java:25 import ':'=31
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '!'=32
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '!='=33
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '='=34
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '=='=35
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '>='=36
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '<='=37
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '>'=38
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '<'=39
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '*'=40
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '/'=41
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '%'=42
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '+'=43
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '-'=44
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '('=45
2022-03-16 22:14:39:904 grammar LogManager.java:25 import ')'=46
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '{'=47
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '}'=48
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '['=49
2022-03-16 22:14:39:904 grammar LogManager.java:25 import ']'=50
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '||'=51
2022-03-16 22:14:39:904 grammar LogManager.java:25 import '&&'=52
2022-03-16 22:14:39:905 grammar LogManager.java:25 tokens={PRINTLN=1, P_NUMBER=2, P_STRING=3, P_IF=4, P_ELSE=5, P_WHILE=6, P_POW=7, P_POWF=8, P_I64=9, P_F64=10, P_LET=11, P_MUT=12, P_AS=13, P_TRUE=14, P_FALSE=15, P_MATCH=16, P_LOOP=17, P_ABS=18, P_SQRT=19, P_TOSTRING=20, P_CLONE=21, P_FOR=22, P_IN=23, NUMBER=24, DECIMAL=25, STRING=26, ID=27, PUNTO=28, PTCOMA=29, COMA=30, DOSPUNTOS=31, DIFERENTE=32, DIFERENTEDE=33, IGUAL=34, IGUALIGUA=35, MAYORIGUAL=36, MENORIGUAL=37, MAYOR=38, MENOR=39, MUL=40, DIV=41, MODULO=42, ADD=43, SUB=44, PARIZQ=45, PARDER=46, LLAVEIZQ=47, LLAVEDER=48, CORIZQ=49, CORDER=50, OR=51, AND=52, MULTICOMENT=53, WHITESPACE=54, 'println'=1, 'number'=2, 'string'=3, 'if'=4, 'else'=5, 'while'=6, 'pow'=7, 'powf'=8, 'i64'=9, 'f64'=10, 'let'=11, 'mut'=12, 'as'=13, 'true'=14, 'false'=15, 'match'=16, 'loop'=17, 'abs'=18, 'sqrt'=19, 'to_string'=20, 'clone'=21, 'for'=22, 'in'=23, '.'=28, ';'=29, ','=30, ':'=31, '!'=32, '!='=33, '='=34, '=='=35, '>='=36, '<='=37, '>'=38, '<'=39, '*'=40, '/'=41, '%'=42, '+'=43, '-'=44, '('=45, ')'=46, '{'=47, '}'=48, '['=49, ']'=50, '||'=51, '&&'=52}
2022-03-16 22:14:39:905 semantics LogManager.java:25 tokens={EOF=-1, PRINTLN=1, P_NUMBER=2, P_STRING=3, P_IF=4, P_ELSE=5, P_WHILE=6, P_POW=7, P_POWF=8, P_I64=9, P_F64=10, P_LET=11, P_MUT=12, P_AS=13, P_TRUE=14, P_FALSE=15, P_MATCH=16, P_LOOP=17, P_ABS=18, P_SQRT=19, P_TOSTRING=20, P_CLONE=21, P_FOR=22, P_IN=23, NUMBER=24, DECIMAL=25, STRING=26, ID=27, PUNTO=28, PTCOMA=29, COMA=30, DOSPUNTOS=31, DIFERENTE=32, DIFERENTEDE=33, IGUAL=34, IGUALIGUA=35, MAYORIGUAL=36, MENORIGUAL=37, MAYOR=38, MENOR=39, MUL=40, DIV=41, MODULO=42, ADD=43, SUB=44, PARIZQ=45, PARDER=46, LLAVEIZQ=47, LLAVEDER=48, CORIZQ=49, CORDER=50, OR=51, AND=52, MULTICOMENT=53, WHITESPACE=54}
2022-03-16 22:14:39:905 semantics LogManager.java:25 strings={'println'=1, 'number'=2, 'string'=3, 'if'=4, 'else'=5, 'while'=6, 'pow'=7, 'powf'=8, 'i64'=9, 'f64'=10, 'let'=11, 'mut'=12, 'as'=13, 'true'=14, 'false'=15, 'match'=16, 'loop'=17, 'abs'=18, 'sqrt'=19, 'to_string'=20, 'clone'=21, 'for'=22, 'in'=23, '.'=28, ';'=29, ','=30, ':'=31, '!'=32, '!='=33, '='=34, '=='=35, '>='=36, '<='=37, '>'=38, '<'=39, '*'=40, '/'=41, '%'=42, '+'=43, '-'=44, '('=45, ')'=46, '{'=47, '}'=48, '['=49, ']'=50, '||'=51, '&&'=52}
2022-03-16 22:14:39:932 LL1 LogManager.java:25 
DECISION 0 in rule instrucciones
2022-03-16 22:14:39:932 LL1 LogManager.java:25 look=[{1, 4, 6, 11, 17, 22, 27}, {<EOF>, 48}]
2022-03-16 22:14:39:932 LL1 LogManager.java:25 LL(1)? true
2022-03-16 22:14:39:932 LL1 LogManager.java:25 
DECISION 1 in rule instruccion
2022-03-16 22:14:39:932 LL1 LogManager.java:25 look=[1, 11, 11, 27, 4, 4, 6, 17, 22]
2022-03-16 22:14:39:932 LL1 LogManager.java:25 LL(1)? false
2022-03-16 22:14:39:932 LL1 LogManager.java:25 
DECISION 2 in rule tipo
2022-03-16 22:14:39:933 LL1 LogManager.java:25 look=[10, 9, 3]
2022-03-16 22:14:39:933 LL1 LogManager.java:25 LL(1)? true
2022-03-16 22:14:39:933 LL1 LogManager.java:25 
DECISION 3 in rule mut
2022-03-16 22:14:39:933 LL1 LogManager.java:25 look=[12, {27, 49}]
2022-03-16 22:14:39:933 LL1 LogManager.java:25 LL(1)? true
2022-03-16 22:14:39:933 LL1 LogManager.java:25 
DECISION 4 in rule array_st
2022-03-16 22:14:39:933 LL1 LogManager.java:25 look=[49, 27]
2022-03-16 22:14:39:933 LL1 LogManager.java:25 LL(1)? true
2022-03-16 22:14:39:933 LL1 LogManager.java:25 
DECISION 5 in rule expr_arit
2022-03-16 22:14:39:933 LL1 LogManager.java:25 look=[{9..10}, 32, 49, {14..15, 24..27, 44}, 45]
2022-03-16 22:14:39:933 LL1 LogManager.java:25 LL(1)? true
2022-03-16 22:14:39:933 LL1 LogManager.java:25 
DECISION 6 in rule expr_arit
2022-03-16 22:14:39:933 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null, null]
2022-03-16 22:14:39:933 LL1 LogManager.java:25 LL(1)? false
2022-03-16 22:14:39:933 LL1 LogManager.java:25 
DECISION 7 in rule expr_arit
2022-03-16 22:14:39:933 LL1 LogManager.java:25 look=[null, null]
2022-03-16 22:14:39:933 LL1 LogManager.java:25 LL(1)? false
2022-03-16 22:14:39:933 LL1 LogManager.java:25 
DECISION 8 in rule listValues
2022-03-16 22:14:39:933 LL1 LogManager.java:25 look=[null, 50]
2022-03-16 22:14:39:933 LL1 LogManager.java:25 LL(1)? false
2022-03-16 22:14:39:933 LL1 LogManager.java:25 
DECISION 9 in rule primitivo
2022-03-16 22:14:39:933 LL1 LogManager.java:25 look=[24, 44, 44, 26, 25, 25, 24, 27, 14, 15]
2022-03-16 22:14:39:934 LL1 LogManager.java:25 LL(1)? false
2022-03-16 22:14:39:934 LL1 LogManager.java:25 
DECISION 10 in rule listArray
2022-03-16 22:14:39:934 LL1 LogManager.java:25 look=[null, null]
2022-03-16 22:14:39:934 LL1 LogManager.java:25 LL(1)? false
2022-03-16 22:14:39:956 action-translator LogManager.java:25 translate 
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"


2022-03-16 22:14:39:990 action-translator LogManager.java:25 translate $lista = $instrucciones.l
2022-03-16 22:14:39:990 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,18:19]
2022-03-16 22:14:39:990 action-translator LogManager.java:25 qattr [@-1,10:22='instrucciones',<0>,18:28].[@-1,24:24='l',<0>,18:42]
2022-03-16 22:14:39:991 action-translator LogManager.java:25 translate 
    $l =  arrayList.New()
  
2022-03-16 22:14:39:991 action-translator LogManager.java:25 attr [@-1,7:7='l',<0>,23:5]
2022-03-16 22:14:39:993 action-translator LogManager.java:25 translate 
      listInt := localctx.(*InstruccionesContext).GetE()
      		for _, e := range listInt {
            $l.Add(e.GetInstr())
          }
    
2022-03-16 22:14:39:993 action-translator LogManager.java:25 attr [@-1,110:110='l',<0>,28:13]
2022-03-16 22:14:39:995 action-translator LogManager.java:25 translate $instr = instruction.NewImprimir($expression.p)
2022-03-16 22:14:39:995 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,35:52]
2022-03-16 22:14:39:995 action-translator LogManager.java:25 qattr [@-1,34:43='expression',<0>,35:85].[@-1,45:45='p',<0>,35:96]
2022-03-16 22:14:39:996 action-translator LogManager.java:25 translate $instr = instruction.NewDeclaration($id.text,$isTipo.p,$expression.p, $isArray.arr,$muteable.arr)	
2022-03-16 22:14:39:996 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,36:89]
2022-03-16 22:14:39:996 action-translator LogManager.java:25 qattr [@-1,37:38='id',<0>,36:125].[@-1,40:43='text',<0>,36:128]
2022-03-16 22:14:39:996 action-translator LogManager.java:25 qattr [@-1,46:51='isTipo',<0>,36:134].[@-1,53:53='p',<0>,36:141]
2022-03-16 22:14:39:996 action-translator LogManager.java:25 qattr [@-1,56:65='expression',<0>,36:144].[@-1,67:67='p',<0>,36:155]
2022-03-16 22:14:39:996 action-translator LogManager.java:25 qattr [@-1,71:77='isArray',<0>,36:159].[@-1,79:81='arr',<0>,36:167]
2022-03-16 22:14:39:996 action-translator LogManager.java:25 qattr [@-1,84:91='muteable',<0>,36:172].[@-1,93:95='arr',<0>,36:181]
2022-03-16 22:14:39:996 action-translator LogManager.java:25 translate $instr = instruction.NewDeclaration($id.text,interfaces.NULL,$expression.p, $isArray.arr,$muteable.arr)	
2022-03-16 22:14:39:996 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,37:67]
2022-03-16 22:14:39:996 action-translator LogManager.java:25 qattr [@-1,37:38='id',<0>,37:103].[@-1,40:43='text',<0>,37:106]
2022-03-16 22:14:39:996 action-translator LogManager.java:25 qattr [@-1,62:71='expression',<0>,37:128].[@-1,73:73='p',<0>,37:139]
2022-03-16 22:14:39:996 action-translator LogManager.java:25 qattr [@-1,77:83='isArray',<0>,37:143].[@-1,85:87='arr',<0>,37:151]
2022-03-16 22:14:39:996 action-translator LogManager.java:25 qattr [@-1,90:97='muteable',<0>,37:156].[@-1,99:101='arr',<0>,37:165]
2022-03-16 22:14:39:997 action-translator LogManager.java:25 translate $instr = instruction.NewAssignment($id.text,$expression.p)
2022-03-16 22:14:39:997 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,38:29]
2022-03-16 22:14:39:997 action-translator LogManager.java:25 qattr [@-1,36:37='id',<0>,38:64].[@-1,39:42='text',<0>,38:67]
2022-03-16 22:14:39:997 action-translator LogManager.java:25 qattr [@-1,45:54='expression',<0>,38:73].[@-1,56:56='p',<0>,38:84]
2022-03-16 22:14:39:997 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p, $instrucciones.l,false,nil)
2022-03-16 22:14:39:997 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,39:54]
2022-03-16 22:14:39:997 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,39:81].[@-1,39:39='p',<0>,39:92]
2022-03-16 22:14:39:997 action-translator LogManager.java:25 qattr [@-1,43:55='instrucciones',<0>,39:96].[@-1,57:57='l',<0>,39:110]
2022-03-16 22:14:39:997 action-translator LogManager.java:25 translate $instr = instruction.NewIf($expression.p, $i1.l,true,$i2.l)
2022-03-16 22:14:39:997 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,40:98]
2022-03-16 22:14:39:997 action-translator LogManager.java:25 qattr [@-1,28:37='expression',<0>,40:125].[@-1,39:39='p',<0>,40:136]
2022-03-16 22:14:39:998 action-translator LogManager.java:25 qattr [@-1,43:44='i1',<0>,40:140].[@-1,46:46='l',<0>,40:143]
2022-03-16 22:14:39:998 action-translator LogManager.java:25 qattr [@-1,54:55='i2',<0>,40:151].[@-1,57:57='l',<0>,40:154]
2022-03-16 22:14:39:998 action-translator LogManager.java:25 translate $instr = instruction.NewWhile($expression.p, $instrucciones.l)
2022-03-16 22:14:39:998 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,41:57]
2022-03-16 22:14:39:998 action-translator LogManager.java:25 qattr [@-1,31:40='expression',<0>,41:87].[@-1,42:42='p',<0>,41:98]
2022-03-16 22:14:39:998 action-translator LogManager.java:25 qattr [@-1,46:58='instrucciones',<0>,41:102].[@-1,60:60='l',<0>,41:116]
2022-03-16 22:14:39:998 action-translator LogManager.java:25 translate $instr = instruction.NewLoop($instrucciones.l)
2022-03-16 22:14:39:998 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,42:45]
2022-03-16 22:14:39:998 action-translator LogManager.java:25 qattr [@-1,30:42='instrucciones',<0>,42:74].[@-1,44:44='l',<0>,42:88]
2022-03-16 22:14:39:998 action-translator LogManager.java:25 translate $instr = instruction.NewForin($id.text,$f2.p,$instrucciones.l)
2022-03-16 22:14:39:998 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,43:70]
2022-03-16 22:14:39:998 action-translator LogManager.java:25 qattr [@-1,31:32='id',<0>,43:100].[@-1,34:37='text',<0>,43:103]
2022-03-16 22:14:39:999 action-translator LogManager.java:25 qattr [@-1,40:41='f2',<0>,43:109].[@-1,43:43='p',<0>,43:112]
2022-03-16 22:14:39:999 action-translator LogManager.java:25 qattr [@-1,46:58='instrucciones',<0>,43:115].[@-1,60:60='l',<0>,43:129]
2022-03-16 22:14:39:999 action-translator LogManager.java:25 translate $p=interfaces.FLOAT
2022-03-16 22:14:39:999 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,48:7]
2022-03-16 22:14:39:999 action-translator LogManager.java:25 translate $p=interfaces.INTEGER
2022-03-16 22:14:39:999 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,49:7]
2022-03-16 22:14:39:999 action-translator LogManager.java:25 translate $p=interfaces.STRING
2022-03-16 22:14:39:999 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,50:10]
2022-03-16 22:14:40:000 action-translator LogManager.java:25 translate  $arr = true 
2022-03-16 22:14:40:000 action-translator LogManager.java:25 attr [@-1,2:4='arr',<0>,53:9]
2022-03-16 22:14:40:000 action-translator LogManager.java:25 translate  $arr = true 
2022-03-16 22:14:40:000 action-translator LogManager.java:25 attr [@-1,2:4='arr',<0>,58:21]
2022-03-16 22:14:40:001 action-translator LogManager.java:25 translate $p = $expr_arit.p
2022-03-16 22:14:40:001 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,63:20]
2022-03-16 22:14:40:001 action-translator LogManager.java:25 qattr [@-1,6:14='expr_arit',<0>,63:25].[@-1,16:16='p',<0>,63:35]
2022-03-16 22:14:40:002 action-translator LogManager.java:25 translate 
2022-03-16 22:14:40:003 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-16 22:14:40:003 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:304]
2022-03-16 22:14:40:003 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,2:332].[@-1,34:34='p',<0>,2:337]
2022-03-16 22:14:40:003 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,2:340].[@-1,40:43='text',<0>,2:343]
2022-03-16 22:14:40:003 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,2:349].[@-1,51:51='p',<0>,2:354]
2022-03-16 22:14:40:003 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,2:363].[@-1,65:69='start',<0>,2:368]
2022-03-16 22:14:40:003 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,2:385].[@-1,87:91='start',<0>,2:390]
2022-03-16 22:14:40:003 action-translator LogManager.java:25 translate $p = expresion.NewOperacion(nil,$op.text,$opDe.p,false,$opDe.start.GetLine(),$opDe.start.GetColumn())
2022-03-16 22:14:40:003 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,3:79]
2022-03-16 22:14:40:003 action-translator LogManager.java:25 qattr [@-1,33:34='op',<0>,3:111].[@-1,36:39='text',<0>,3:114]
2022-03-16 22:14:40:003 action-translator LogManager.java:25 qattr [@-1,42:45='opDe',<0>,3:120].[@-1,47:47='p',<0>,3:125]
2022-03-16 22:14:40:003 action-translator LogManager.java:25 qattr [@-1,56:59='opDe',<0>,3:134].[@-1,61:65='start',<0>,3:139]
2022-03-16 22:14:40:003 action-translator LogManager.java:25 qattr [@-1,78:81='opDe',<0>,3:156].[@-1,83:87='start',<0>,3:161]
2022-03-16 22:14:40:004 action-translator LogManager.java:25 translate  $p = expresion.NewArray($listValues.l) 
2022-03-16 22:14:40:004 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,4:85]
2022-03-16 22:14:40:004 action-translator LogManager.java:25 qattr [@-1,26:35='listValues',<0>,4:109].[@-1,37:37='l',<0>,4:120]
2022-03-16 22:14:40:004 action-translator LogManager.java:25 translate $p = $primitivo.p
2022-03-16 22:14:40:004 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,5:37]
2022-03-16 22:14:40:004 action-translator LogManager.java:25 qattr [@-1,6:14='primitivo',<0>,5:42].[@-1,16:16='p',<0>,5:52]
2022-03-16 22:14:40:004 action-translator LogManager.java:25 translate $p = $expression.p
2022-03-16 22:14:40:004 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,6:84]
2022-03-16 22:14:40:004 action-translator LogManager.java:25 qattr [@-1,6:15='expression',<0>,6:89].[@-1,17:17='p',<0>,6:100]
2022-03-16 22:14:40:005 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2022-03-16 22:14:40:005 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-16 22:14:40:005 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,9:144]
2022-03-16 22:14:40:005 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,9:172].[@-1,34:34='p',<0>,9:177]
2022-03-16 22:14:40:005 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,9:180].[@-1,40:43='text',<0>,9:183]
2022-03-16 22:14:40:005 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,9:189].[@-1,51:51='p',<0>,9:194]
2022-03-16 22:14:40:005 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,9:203].[@-1,65:69='start',<0>,9:208]
2022-03-16 22:14:40:005 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,9:225].[@-1,87:91='start',<0>,9:230]
2022-03-16 22:14:40:005 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2022-03-16 22:14:40:005 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-16 22:14:40:005 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,10:154]
2022-03-16 22:14:40:005 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,10:182].[@-1,34:34='p',<0>,10:187]
2022-03-16 22:14:40:005 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,10:190].[@-1,40:43='text',<0>,10:193]
2022-03-16 22:14:40:005 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,10:199].[@-1,51:51='p',<0>,10:204]
2022-03-16 22:14:40:005 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,10:213].[@-1,65:69='start',<0>,10:218]
2022-03-16 22:14:40:006 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,10:235].[@-1,87:91='start',<0>,10:240]
2022-03-16 22:14:40:006 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-03-16 22:14:40:006 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-16 22:14:40:006 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,11:247]
2022-03-16 22:14:40:006 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,11:275].[@-1,34:34='p',<0>,11:280]
2022-03-16 22:14:40:006 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,11:283].[@-1,40:43='text',<0>,11:286]
2022-03-16 22:14:40:006 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,11:292].[@-1,51:51='p',<0>,11:297]
2022-03-16 22:14:40:006 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,11:306].[@-1,65:69='start',<0>,11:311]
2022-03-16 22:14:40:006 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,11:328].[@-1,87:91='start',<0>,11:333]
2022-03-16 22:14:40:006 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-03-16 22:14:40:006 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-16 22:14:40:006 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,12:139]
2022-03-16 22:14:40:006 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,12:167].[@-1,34:34='p',<0>,12:172]
2022-03-16 22:14:40:007 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,12:175].[@-1,40:43='text',<0>,12:178]
2022-03-16 22:14:40:007 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,12:184].[@-1,51:51='p',<0>,12:189]
2022-03-16 22:14:40:007 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,12:198].[@-1,65:69='start',<0>,12:203]
2022-03-16 22:14:40:007 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,12:220].[@-1,87:91='start',<0>,12:225]
2022-03-16 22:14:40:007 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2022-03-16 22:14:40:007 action-translator LogManager.java:25 translate $p = expresion.NewOperacion($opIz.p,$op.text,$opDe.p,false,$opIz.start.GetLine(),$opIz.start.GetColumn())
2022-03-16 22:14:40:007 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,13:152]
2022-03-16 22:14:40:007 action-translator LogManager.java:25 qattr [@-1,29:32='opIz',<0>,13:180].[@-1,34:34='p',<0>,13:185]
2022-03-16 22:14:40:007 action-translator LogManager.java:25 qattr [@-1,37:38='op',<0>,13:188].[@-1,40:43='text',<0>,13:191]
2022-03-16 22:14:40:007 action-translator LogManager.java:25 qattr [@-1,46:49='opDe',<0>,13:197].[@-1,51:51='p',<0>,13:202]
2022-03-16 22:14:40:007 action-translator LogManager.java:25 qattr [@-1,60:63='opIz',<0>,13:211].[@-1,65:69='start',<0>,13:216]
2022-03-16 22:14:40:007 action-translator LogManager.java:25 qattr [@-1,82:85='opIz',<0>,13:233].[@-1,87:91='start',<0>,13:238]
2022-03-16 22:14:40:007 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-03-16 22:14:40:007 action-translator LogManager.java:25 translate $p = expresion.NewNativas($opIz.p,$op.text)
2022-03-16 22:14:40:008 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,14:162]
2022-03-16 22:14:40:008 action-translator LogManager.java:25 qattr [@-1,27:30='opIz',<0>,14:188].[@-1,32:32='p',<0>,14:193]
2022-03-16 22:14:40:008 action-translator LogManager.java:25 qattr [@-1,35:36='op',<0>,14:196].[@-1,38:41='text',<0>,14:199]
2022-03-16 22:14:40:008 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-03-16 22:14:40:008 action-translator LogManager.java:25 translate $p = expresion.NewNativas($opIz.p,$op.text)
2022-03-16 22:14:40:008 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,15:163]
2022-03-16 22:14:40:008 action-translator LogManager.java:25 qattr [@-1,27:30='opIz',<0>,15:189].[@-1,32:32='p',<0>,15:194]
2022-03-16 22:14:40:008 action-translator LogManager.java:25 qattr [@-1,35:36='op',<0>,15:197].[@-1,38:41='text',<0>,15:200]
2022-03-16 22:14:40:008 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-16 22:14:40:008 action-translator LogManager.java:25 translate $p = expresion.NewNativas($opIz.p,$op.text)
2022-03-16 22:14:40:008 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,16:167]
2022-03-16 22:14:40:008 action-translator LogManager.java:25 qattr [@-1,27:30='opIz',<0>,16:193].[@-1,32:32='p',<0>,16:198]
2022-03-16 22:14:40:008 action-translator LogManager.java:25 qattr [@-1,35:36='op',<0>,16:201].[@-1,38:41='text',<0>,16:204]
2022-03-16 22:14:40:008 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-16 22:14:40:008 action-translator LogManager.java:25 translate $p = expresion.NewNativas($opIz.p,$op.text)
2022-03-16 22:14:40:009 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,17:164]
2022-03-16 22:14:40:009 action-translator LogManager.java:25 qattr [@-1,27:30='opIz',<0>,17:190].[@-1,32:32='p',<0>,17:195]
2022-03-16 22:14:40:009 action-translator LogManager.java:25 qattr [@-1,35:36='op',<0>,17:198].[@-1,38:41='text',<0>,17:201]
2022-03-16 22:14:40:011 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2022-03-16 22:14:40:011 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2022-03-16 22:14:40:011 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-03-16 22:14:40:011 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-03-16 22:14:40:011 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2022-03-16 22:14:40:011 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-03-16 22:14:40:011 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-03-16 22:14:40:011 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-16 22:14:40:011 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-16 22:14:40:011 action-translator LogManager.java:25 translate 
2022-03-16 22:14:40:011 action-translator LogManager.java:25 translate  
                    $l = arrayList.New()
                    $l.Add($expression.p)
                
2022-03-16 22:14:40:011 action-translator LogManager.java:25 attr [@-1,24:24='l',<0>,3:21]
2022-03-16 22:14:40:011 action-translator LogManager.java:25 attr [@-1,66:66='l',<0>,4:21]
2022-03-16 22:14:40:012 action-translator LogManager.java:25 qattr [@-1,73:82='expression',<0>,4:28].[@-1,84:84='p',<0>,4:39]
2022-03-16 22:14:40:012 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-16 22:14:40:012 action-translator LogManager.java:25 translate  
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                              
2022-03-16 22:14:40:012 action-translator LogManager.java:25 qattr [@-1,54:57='list',<0>,9:51].[@-1,59:59='l',<0>,9:56]
2022-03-16 22:14:40:012 action-translator LogManager.java:25 qattr [@-1,66:75='expression',<0>,9:63].[@-1,77:77='p',<0>,9:74]
2022-03-16 22:14:40:012 action-translator LogManager.java:25 attr [@-1,132:132='l',<0>,10:51]
2022-03-16 22:14:40:012 action-translator LogManager.java:25 qattr [@-1,137:140='list',<0>,10:56].[@-1,142:142='l',<0>,10:61]
2022-03-16 22:14:40:012 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-16 22:14:40:013 action-translator LogManager.java:25 translate 
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (num,interfaces.INTEGER)
       
2022-03-16 22:14:40:013 action-translator LogManager.java:25 qattr [@-1,40:45='NUMBER',<0>,97:38].[@-1,47:50='text',<0>,97:45]
2022-03-16 22:14:40:014 action-translator LogManager.java:25 attr [@-1,173:173='p',<0>,102:13]
2022-03-16 22:14:40:014 action-translator LogManager.java:25 translate 
            	num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                
            $p = expresion.NewPrimitivo (-num,interfaces.INTEGER)
       
2022-03-16 22:14:40:014 action-translator LogManager.java:25 qattr [@-1,40:45='NUMBER',<0>,105:38].[@-1,47:50='text',<0>,105:45]
2022-03-16 22:14:40:014 action-translator LogManager.java:25 attr [@-1,173:173='p',<0>,110:13]
2022-03-16 22:14:40:014 action-translator LogManager.java:25 translate 
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (-a,interfaces.FLOAT)
       
2022-03-16 22:14:40:014 action-translator LogManager.java:25 qattr [@-1,46:52='DECIMAL',<0>,113:44].[@-1,54:57='text',<0>,113:52]
2022-03-16 22:14:40:014 action-translator LogManager.java:25 attr [@-1,202:202='p',<0>,118:13]
2022-03-16 22:14:40:014 action-translator LogManager.java:25 translate  
              
      str:= $STRING.text[1:len($STRING.text)-1]
     
      $p = expresion.NewPrimitivo(str,interfaces.STRING)
2022-03-16 22:14:40:014 action-translator LogManager.java:25 qattr [@-1,32:37='STRING',<0>,122:13].[@-1,39:42='text',<0>,122:20]
2022-03-16 22:14:40:014 action-translator LogManager.java:25 qattr [@-1,51:56='STRING',<0>,122:32].[@-1,58:61='text',<0>,122:39]
2022-03-16 22:14:40:014 action-translator LogManager.java:25 attr [@-1,82:82='p',<0>,124:7]
2022-03-16 22:14:40:014 action-translator LogManager.java:25 translate 
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
                 a := float64(num) 
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       
2022-03-16 22:14:40:015 action-translator LogManager.java:25 qattr [@-1,46:52='DECIMAL',<0>,126:44].[@-1,54:57='text',<0>,126:52]
2022-03-16 22:14:40:015 action-translator LogManager.java:25 attr [@-1,202:202='p',<0>,131:13]
2022-03-16 22:14:40:015 action-translator LogManager.java:25 translate 
            	num,err := strconv.ParseFloat($DECIMAL.text,64)
                if err!= nil{
                    fmt.Println(err)
                }
            a := int(num)
            $p = expresion.NewPrimitivo (a,interfaces.INTEGER)
       
2022-03-16 22:14:40:015 action-translator LogManager.java:25 qattr [@-1,46:52='DECIMAL',<0>,135:44].[@-1,54:57='text',<0>,135:52]
2022-03-16 22:14:40:015 action-translator LogManager.java:25 attr [@-1,192:192='p',<0>,140:13]
2022-03-16 22:14:40:015 action-translator LogManager.java:25 translate 
           num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
            a := float64(num)  
            $p = expresion.NewPrimitivo (a,interfaces.FLOAT)
       
2022-03-16 22:14:40:015 action-translator LogManager.java:25 qattr [@-1,38:43='NUMBER',<0>,143:36].[@-1,45:48='text',<0>,143:43]
2022-03-16 22:14:40:015 action-translator LogManager.java:25 attr [@-1,186:186='p',<0>,148:13]
2022-03-16 22:14:40:015 action-translator LogManager.java:25 translate  $p = $list.p
2022-03-16 22:14:40:015 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,150:22]
2022-03-16 22:14:40:015 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,150:27].[@-1,12:12='p',<0>,150:32]
2022-03-16 22:14:40:015 action-translator LogManager.java:25 translate       
      $p = expresion.NewPrimitivo("true",interfaces.TRUE)
2022-03-16 22:14:40:015 action-translator LogManager.java:25 attr [@-1,15:15='p',<0>,152:7]
2022-03-16 22:14:40:015 action-translator LogManager.java:25 translate       
      $p = expresion.NewPrimitivo("false",interfaces.FALSE)
2022-03-16 22:14:40:015 action-translator LogManager.java:25 attr [@-1,15:15='p',<0>,154:7]
2022-03-16 22:14:40:016 action-translator LogManager.java:25 translate 
2022-03-16 22:14:40:016 action-translator LogManager.java:25 translate  $p = expresion.NewCallVariable($ID.text)
2022-03-16 22:14:40:016 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2022-03-16 22:14:40:016 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,2:65].[@-1,36:39='text',<0>,2:68]
2022-03-16 22:14:40:016 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-16 22:14:40:016 action-translator LogManager.java:25 translate  $p = expresion.NewArrayAccess($list.p, $expression.p) 
2022-03-16 22:14:40:016 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:133]
2022-03-16 22:14:40:016 action-translator LogManager.java:25 qattr [@-1,32:35='list',<0>,5:163].[@-1,37:37='p',<0>,5:168]
2022-03-16 22:14:40:016 action-translator LogManager.java:25 qattr [@-1,41:50='expression',<0>,5:172].[@-1,52:52='p',<0>,5:183]
2022-03-16 22:14:40:016 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-16 22:14:40:223 action-translator LogManager.java:25 translate 
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"


2022-03-16 22:14:40:223 action-translator LogManager.java:25 translate 
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"


2022-03-16 22:14:40:342 action-translator LogManager.java:25 translate 
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"


2022-03-16 22:14:40:343 action-translator LogManager.java:25 translate 
    import "proyecto1/interfaces"
    import "proyecto1/expresion"
    import "proyecto1/instruction"
    import arrayList "github.com/colegno/arraylist"


